{
    "a": {
        "abs": {
            "significado": "Retorna o valor absoluto de um número.",
            "uso": "É usado para obter a magnitude de um número sem considerar o seu sinal.",
            "ejemplo": "\n                numero1 = -10\n                print(abs(numero1))  # Saída: 10\n                "
        },
        "absolute_import": {
            "significado": "Diretiva usada para habilitar importações absolutas no Python 2.x e versões posteriores.",
            "uso": "É usado para evitar conflitos entre módulos locais e globais.",
            "ejemplo": "\n                from __future__ import absolute_import\n\n                # Sempre importa o módulo global, não um local com o mesmo nome\n                import math\n                "
        },
        "add": {
            "significado": "Método usado para adicionar um elemento a um conjunto ou realizar uma soma entre matrizes (dependendo do contexto).",
            "uso": "É usado em conjuntos para adicionar elementos ou no NumPy para realizar operações matemáticas.",
            "ejemplo": "\n                # Conjuntos\n                conjunto = {1, 2, 3}\n                conjunto.add(4)\n                print(conjunto)  # Saída: {1, 2, 3, 4}\n\n                # NumPy\n                import numpy as np\n                resultado = np.add(2, 3)\n                print(resultado)  # Saída: 5\n                "
        },
        "all": {
            "significado": "Retorna True se todos os elementos de um iterável forem verdadeiros (ou se o iterável estiver vazio).",
            "uso": "É usado para verificar se todos os valores de um iterável atendem a uma condição.",
            "ejemplo": "\n                lista = [True, True, True]\n                print(all(lista))  # Saída: True\n\n                numeros = [1, 2, 0]\n                print(all(numeros))  # Saída: False (0 é avaliado como False)\n                "
        },
        "allclose": {
            "significado": "Verifica se todos os elementos de dois arrays são aproximadamente iguais.",
            "uso": "É usado no NumPy para verificar a igualdade de elementos com tolerância a pequenas diferenças.",
            "ejemplo": "\n                import numpy as np\n\n                a = [1.0, 2.001]\n                b = [1.0, 2.0009]\n                print(np.allclose(a, b, atol=0.01))  # Saída: True\n                "
        },
        "allexcept": {
            "significado": "Não é um termo nativo do Python. Pode se referir a uma abordagem lógica que aplica operações a todos os elementos, exceto alguns específicos.",
            "uso": "Geralmente implementado manualmente.",
            "ejemplo": "\n                lista = [1, 2, 3, 4]\n                resultado = [x for x in lista if x != 2]  # Filtra todos, exceto o 2\n                print(resultado)  # Saída: [1, 3, 4]\n                "
        },
        "any": {
            "significado": "Retorna True se pelo menos um elemento de um iterável for verdadeiro (ou se o iterável estiver vazio).",
            "uso": "É usado para verificar se pelo menos um valor de um iterável atende a uma condição.",
            "ejemplo": "\n                lista = [False, False, True]\n                print(any(lista))  # Saída: True\n\n                numeros = [0, 0, 0]\n                print(any(numeros))  # Saída: False\n            "
        },
        "append": {
            "significado": "Adiciona um elemento ao final de uma lista.",
            "uso": "É usado para adicionar novos elementos a uma lista existente.",
            "ejemplo": "\n                lista = [1, 2, 3]\n                lista.append(4)\n                print(lista)  # Saída: [1, 2, 3, 4]\n            "
        },
        "apply": {
            "significado": "Método usado no pandas para aplicar uma função a linhas ou colunas de um DataFrame.",
            "uso": "É usado para realizar operações personalizadas em linhas ou colunas.",
            "ejemplo": "\n                import pandas as pd\n\n                dados = pd.DataFrame({'A': [1, 2, 3]})\n                dados['B'] = dados['A'].apply(lambda x: x * 2)\n                print(dados)\n                # Saída:\n                #    A  B\n                # 0  1  2\n                # 1  2  4\n                # 2  3  6\n                "
        },
        "argmin": {
            "significado": "Retorna o índice do valor mínimo em um array ou iterável.",
            "uso": "É usado em bibliotecas como NumPy para localizar o índice do menor valor em estruturas de dados.",
            "ejemplo": "\n                import numpy as np\n\n                numeros = [1, 5, 2, 9, 3]\n                print(np.argmin(numeros))  # Saída: 0 (índice do valor 1)\n            "
        },
        "array": {
            "significado": "É uma estrutura de dados que contém múltiplos elementos do mesmo tipo, comumente utilizada em bibliotecas como NumPy.",
            "uso": "É usada para armazenar e operar eficientemente com grandes quantidades de dados homogêneos.",
            "ejemplo": "\n                import numpy as np\n\n                numeros = np.array([1, 2, 3, 4])\n                print(numeros)  # Saída: [1 2 3 4]\n            "
        },
        "args": {
            "significado": "É um parâmetro que permite receber um número variável de argumentos posicionais em uma função.",
            "uso": "É usado para lidar com múltiplos argumentos em uma função sem especificar cada um individualmente.",
            "ejemplo": "\n                def soma(*args):\n                    return sum(args)\n\n                print(soma(1, 2, 3))  # Saída: 6\n                "
        },
        "arccos": {
            "significado": "Retorna o arco cosseno (em radianos) de um valor.",
            "uso": "É usado em cálculos trigonométricos com o NumPy.",
            "ejemplo": "\n                import numpy as np\n\n                resultado = np.arccos(0.5)\n                print(resultado)  # Saída: 1.0471975511965976 (equivalente a π/3)\n                "
        },
        "arcsin": {
            "significado": "Retorna o arco seno (em radianos) de um valor.",
            "uso": "É usado em cálculos trigonométricos com o NumPy.",
            "ejemplo": "\n                import numpy as np\n\n                resultado = np.arcsin(0.5)\n                print(resultado)  # Saída: 0.5235987755982988 (equivalente a π/6)\n                "
        },
        "arctan": {
            "significado": "Retorna o arco tangente (em radianos) de um valor.",
            "uso": "É usado em cálculos trigonométricos com o NumPy.",
            "ejemplo": "\n                import numpy as np\n\n                resultado = np.arctan(1)\n                print(resultado)  # Saída: 0.7853981633974483 (equivalente a π/4)\n                "
        },
        "argparse": {
            "significado": "Módulo do Python usado para gerenciar argumentos e opções de linha de comando.",
            "uso": "É usado para criar interfaces de linha de comando fáceis de usar.",
            "ejemplo": "\n                import argparse\n\n                parser = argparse.ArgumentParser(description='ejemplo de argparse')\n                parser.add_argument('--nome', type=str, help='Seu nome')\n                args = parser.parse_args()\n                print(f'Olá, {args.nome}')\n                "
        },
        "array_like": {
            "significado": "Refere-se a qualquer objeto que possa ser tratado como um array, como listas, tuplas ou arrays do NumPy.",
            "uso": "É usado como entrada em funções do NumPy ou similares para operações com dados.",
            "ejemplo": "\n                import numpy as np\n\n                lista = [1, 2, 3]\n                array = np.array(lista)  # lista é array_like\n                print(array)  # Saída: [1 2 3]\n                "
        },
        "arange": {
            "significado": "Gera um array com valores igualmente espaçados dentro de um intervalo.",
            "uso": "É usado no NumPy para criar sequências numéricas.",
            "ejemplo": "\n                import numpy as np\n\n                resultado = np.arange(0, 10, 2)\n                print(resultado)  # Saída: [0 2 4 6 8]\n                "
        },
        "argmax": {
            "significado": "Retorna o índice do valor máximo em um array ou iterável.",
            "uso": "É usado em bibliotecas como NumPy para localizar o índice do maior valor em estruturas de dados.",
            "ejemplo": "\n                import numpy as np\n\n                numeros = [1, 5, 2, 9, 3]\n                print(np.argmax(numeros))  # Saída: 3 (índice do valor 9)\n            "
        },
        "as": {
            "significado": "Palavra-chave usada para atribuir um alias a módulos ou em declarações `with`.",
            "uso": "Facilita a referência de nomes longos ou específicos no código.",
            "ejemplo": "\n                import numpy as np\n\n                with open('arquivo.txt', 'r') as arquivo:\n                    conteudo = arquivo.read()\n                "
        },
        "assert": {
            "significado": "Avalia uma expressão e gera uma exceção `AssertionError` se a expressão for falsa.",
            "uso": "É usado para verificar condições que devem ser atendidas durante a execução do programa.",
            "ejemplo": "\n                x = 5\n                assert x > 0, 'x deve ser maior que 0'  # Não gera erro\n                assert x < 0, 'x deve ser menor que 0'  # Gera AssertionError\n                "
        },
        "async": {
            "significado": "Define uma função assíncrona que pode ser usada com `await`.",
            "uso": "É usado para implementar programação assíncrona em Python.",
            "ejemplo": "\n                import asyncio\n\n                async def saudacao():\n                    print('Olá')\n                    await asyncio.sleep(1)\n                    print('Adeus')\n\n                asyncio.run(saudacao())\n                "
        },
        "assertEqual": {
            "significado": "Verifica se dois valores são iguais em um teste unitário.",
            "uso": "É usado em testes unitários para validar a igualdade de valores esperados e reais.",
            "ejemplo": "\n                import unittest\n\n                class Teste(unittest.TestCase):\n                    def test_soma(self):\n                        self.assertEqual(1 + 1, 2)  # O teste passa\n                "
        },
        "assertIsNone": {
            "significado": "Verifica se um valor é None em um teste unitário.",
            "uso": "É usado em testes unitários para validar que um valor seja None.",
            "ejemplo": "\n                import unittest\n\n                class Teste(unittest.TestCase):\n                    def test_valor_none(self):\n                        self.assertIsNone(None)  # O teste passa\n                "
        },
        "assertAlmostEqual": {
            "significado": "Verifica se dois valores são aproximadamente iguais até um número específico de casas decimais em um teste unitário.",
            "uso": "É usado em testes unitários para validar valores com tolerância a diferenças pequenas.",
            "ejemplo": "\n                import unittest\n\n                class Teste(unittest.TestCase):\n                    def test_aproximacao(self):\n                        self.assertAlmostEqual(3.14159, 3.14, places=2)  # O teste passa\n                "
        },
        "as_tuple": {
            "significado": "Método que converte um objeto em uma tupla (comum em bibliotecas como o SymPy).",
            "uso": "É usado para transformar objetos em representações de tuplas.",
            "ejemplo": "\n                from sympy import Point\n\n                p = Point(2, 3)\n                print(p.as_tuple())  # Saída: (2, 3)\n                "
        },
        "ascii": {
            "significado": "Retorna uma representação legível de um objeto usando caracteres ASCII.",
            "uso": "É usado para representar strings ou caracteres em um formato seguro em ASCII, substituindo caracteres não ASCII por sequências de escape.",
            "ejemplo": "\n                texto = \"Olá, como você está?\"\n                print(ascii(texto))  # Saída: 'Ol\\xe1, como voc\\xea est\\xe1?'\n            "
        },
        "at": {
            "significado": "Método usado para acessar elementos específicos em estruturas como DataFrames ou arrays (geralmente no pandas).",
            "uso": "É usado para acessar rapidamente um valor individual em uma posição específica.",
            "ejemplo": "\n                import pandas as pd\n\n                dados = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\n                print(dados.at[0, 'A'])  # Saída: 1\n                "
        },
        "attribute": {
            "significado": "Refere-se a uma propriedade ou característica associada a um objeto em Python.",
            "uso": "É usado para acessar ou modificar propriedades de objetos criados a partir de classes.",
            "ejemplo": "\n                class Pessoa:\n                    def __init__(self, nome, idade):\n                        self.nome = nome\n                        self.idade = idade\n\n                p = Pessoa('João', 30)\n                print(p.nome)  # Saída: João\n                p.idade = 31\n                print(p.idade)  # Saída: 31\n                "
        },
        "attributeError": {
            "significado": "É uma exceção que ocorre quando se tenta acessar ou atribuir um atributo que não existe.",
            "uso": "É usado para capturar e tratar erros relacionados a atributos inválidos.",
            "ejemplo": "\n                try:\n                    objeto = 5\n                    objeto.atributo = 10\n                except AttributeError as e:\n                    print('Erro:', e)\n                # Saída: Erro: 'int' object has no attribute 'atributo'\n                "
        },
        "atleast_1d": {
            "significado": "Converte entradas em arrays com pelo menos uma dimensão.",
            "uso": "É usado no NumPy para garantir que os dados tenham uma dimensão mínima.",
            "ejemplo": "\n                import numpy as np\n\n                resultado = np.atleast_1d(5)\n                print(resultado)  # Saída: [5]\n                "
        },
        "atleast_2d": {
            "significado": "Converte entradas em arrays com pelo menos duas dimensões.",
            "uso": "É usado no NumPy para trabalhar com dados no formato de matriz.",
            "ejemplo": "\n                import numpy as np\n\n                resultado = np.atleast_2d([1, 2, 3])\n                print(resultado)\n                # Saída:\n                # [[1 2 3]]\n                "
        },
        "average": {
            "significado": "Calcula a média dos elementos de um array ou lista.",
            "uso": "É usado no NumPy para calcular médias, com possibilidade de ponderar valores.",
            "ejemplo": "\n                import numpy as np\n\n                valores = [1, 2, 3, 4]\n                print(np.average(valores))  # Saída: 2.5\n                "
        },
        "await": {
            "significado": "É usado para aguardar o resultado de uma função assíncrona.",
            "uso": "É utilizado dentro de funções definidas com `async` para pausar sua execução até que uma tarefa assíncrona seja concluída.",
            "ejemplo": "\n                import asyncio\n\n                async def tarefa():\n                    await asyncio.sleep(1)\n                    return 'Tarefa concluída'\n\n                async def main():\n                    resultado = await tarefa()\n                    print(resultado)\n\n                asyncio.run(main())\n                "
        }
    },
    "b": {
        "bin": {
            "significado": "Converte um número em sua representação binária como uma string.",
            "uso": "É utilizado para obter a representação binária de um número inteiro.",
            "ejemplo": "\n                numero = 10\n                print(bin(numero))  # Saída: '0b1010'\n                "
        },
        "bool": {
            "significado": "Tipo de dado que representa valores booleanos: True ou False.",
            "uso": "É utilizado para representar e operar com valores de verdade.",
            "ejemplo": "\n                valor = bool(1)\n                print(valor)  # Saída: True\n                "
        },
        "break": {
            "significado": "Palavra-chave que termina a execução de um loop.",
            "uso": "É utilizado para sair de um loop de forma antecipada.",
            "ejemplo": "\n                for i in range(5):\n                    if i == 3:\n                        break\n                    print(i)  # Saída: 0 1 2\n                "
        },
        "bytes": {
            "significado": "Tipo de dado imutável que representa uma sequência de bytes.",
            "uso": "É utilizado para trabalhar com dados binários.",
            "ejemplo": "\n                b = bytes([65, 66, 67])\n                print(b)  # Saída: b'ABC'\n                "
        },
        "bytearray": {
            "significado": "Tipo de dado mutável que representa uma sequência de bytes.",
            "uso": "É utilizado para modificar sequências de bytes.",
            "ejemplo": "\n                b = bytearray([65, 66, 67])\n                b[0] = 90\n                print(b)  # Saída: bytearray(b'ZBC')\n                "
        },
        "byteswap": {
            "significado": "Método que troca a ordem dos bytes em um objeto.",
            "uso": "É utilizado para alterar a ordem dos bytes em um tipo de dado numérico.",
            "ejemplo": "\n                import numpy as np\n\n                a = np.array([1, 256], dtype=np.int16)\n                a = a.byteswap()\n                print(a)  # Saída: [256 1]\n                "
        },
        "buffer": {
            "significado": "Uma classe em Python que fornece uma visão de acesso a uma área de memória de um objeto.",
            "uso": "É utilizado para acessar a memória de maneira eficiente, especialmente em operações com grandes quantidades de dados.",
            "ejemplo": "\n                buffer = memoryview(b'abc')\n                print(buffer[0])  # Saída: 97 (equivalente a 'a')\n                "
        },
        "base64": {
            "significado": "Módulo que fornece funções para codificar e decodificar dados em base64.",
            "uso": "É utilizado para representar dados binários em uma string de caracteres ASCII.",
            "ejemplo": "\n                import base64\n\n                encoded = base64.b64encode(b'abc')\n                print(encoded)  # Saída: b'YWJj'\n                "
        },
        "bitwise_and": {
            "significado": "Operador que realiza uma operação AND bit a bit entre dois números.",
            "uso": "É utilizado para comparar os bits correspondentes de dois números e devolver 1 somente se ambos os bits forem 1.",
            "ejemplo": "\n                x = 5  # binário: 0101\n                y = 3  # binário: 0011\n                print(x & y)  # Saída: 1 (binário: 0001)\n                "
        },
        "bitwise_or": {
            "significado": "Operador que realiza uma operação OR bit a bit entre dois números.",
            "uso": "É utilizado para comparar os bits correspondentes de dois números e devolver 1 se pelo menos um dos bits for 1.",
            "ejemplo": "\n                x = 5  # binário: 0101\n                y = 3  # binário: 0011\n                print(x | y)  # Saída: 7 (binário: 0111)\n                "
        },
        "bitwise_xor": {
            "significado": "Operador que realiza uma operação XOR bit a bit entre dois números.",
            "uso": "É utilizado para comparar os bits correspondentes de dois números e devolver 1 se os bits forem diferentes.",
            "ejemplo": "\n                x = 5  # binário: 0101\n                y = 3  # binário: 0011\n                print(x ^ y)  # Saída: 6 (binário: 0110)\n                "
        },
        "bitwise_not": {
            "significado": "Operador que realiza uma operação NOT bit a bit sobre um número.",
            "uso": "É utilizado para inverter todos os bits de um número.",
            "ejemplo": "\n            x = 5  # binário: 0101\n            print(~x)  # Saída: -6 (binário: 1010)\n            "
        },
        "binomial": {
            "significado": "Função que calcula o coeficiente binomial (n sobre k).",
            "uso": "É utilizado para calcular o número de formas de selecionar k elementos de um conjunto de n elementos.",
            "ejemplo": "\n                from scipy.special import comb\n\n                resultado = comb(5, 2)\n                print(resultado)  # Saída: 10.0\n                "
        },
        "binascii": {
            "significado": "Módulo que contém funções para converter entre binário e diferentes representações de texto.",
            "uso": "É utilizado para realizar conversões entre strings de texto e dados binários.",
            "ejemplo": "\n                import binascii\n\n                encoded = binascii.hexlify(b'abc')\n                print(encoded)  # Saída: b'616263'\n                "
        },
        "byteorder": {
            "significado": "Indica a ordem dos bytes para representar números na memória.",
            "uso": "É utilizado para manipular a representação de números em sistemas com diferentes arquiteturas.",
            "ejemplo": "\n                import sys\n\n                print(sys.byteorder)  # Saída: 'little' ou 'big'\n                "
        },
        "bit_length": {
            "significado": "Retorna o número de bits necessários para representar um número em binário.",
            "uso": "É utilizado para obter o comprimento em bits de um número inteiro.",
            "ejemplo": "\n                numero = 10\n                print(numero.bit_length())  # Saída: 4\n                "
        },
        "breakpoint": {
            "significado": "Uma função que estabelece um ponto de interrupção no código, ativando o depurador.",
            "uso": "É utilizado para pausar a execução e entrar no depurador interativo.",
            "ejemplo": "\n                def funcao():\n                    breakpoint()  # Interrupção aqui\n                    print('Olá')\n                funcao()\n                "
        },
        "binhex": {
            "significado": "Função para converter um arquivo binário em formato hexadecimal.",
            "uso": "É utilizado para representar dados binários em formato legível em hexadecimal.",
            "ejemplo": "\n                import binhex\n\n                with open('arquivo.bin', 'rb') as f:\n                    binhex.binhex(f, 'arquivo.hex')\n                "
        },
        "bitset": {
            "significado": "Estrutura de dados que permite armazenar uma coleção de bits.",
            "uso": "É utilizado para representar conjuntos de bits e realizar operações eficientes sobre eles.",
            "ejemplo": "\n                # ejemplo não padrão em Python, mas pode-se usar o módulo `bitarray` para criar bitsets\n                from bitarray import bitarray\n\n                bitset = bitarray('10101')\n                print(bitset)  # Saída: bitarray('10101')\n                "
        },
        "broadcast": {
            "significado": "Técnica que permite que arrays de formas diferentes sejam alinhados para realizar operações element-wise.",
            "uso": "É utilizado principalmente no NumPy para operações com arrays de tamanhos diferentes.",
            "ejemplo": "\n                import numpy as np\n\n                a = np.array([1, 2, 3])\n                b = np.array([[1], [2], [3]])\n                resultado = a + b\n                print(resultado)\n                # Saída:\n                # [[2 3 4]\n                #  [3 4 5]\n                #  [4 5 6]]\n                "
        },
        "bitarray": {
            "significado": "Módulo que implementa um tipo de dado eficiente para trabalhar com arrays de bits.",
            "uso": "É utilizado para manipular e gerenciar arrays de bits de forma eficiente.",
            "ejemplo": "\n                from bitarray import bitarray\n\n                a = bitarray('10101')\n                a.append('1')\n                print(a)  # Saída: bitarray('101011')\n                "
        },
        "bitwise_left_shift": {
            "significado": "Operador que realiza um deslocamento de bits para a esquerda.",
            "uso": "É utilizado para deslocar os bits de um número para a esquerda, multiplicando o valor por potências de dois.",
            "ejemplo": "\n                x = 5  # binário: 0101\n                print(x << 1)  # Saída: 10 (binário: 1010)\n                "
        },
        "bitwise_right_shift": {
            "significado": "Operador que realiza um deslocamento de bits para a direita.",
            "uso": "É utilizado para deslocar os bits de um número para a direita, dividindo o valor por potências de dois.",
            "ejemplo": "\n                x = 5  # binário: 0101\n                print(x >> 1)  # Saída: 2 (binário: 0010)\n                "
        },
        "bz2": {
            "significado": "Módulo que fornece compressão e descompressão usando o algoritmo bzip2.",
            "uso": "É utilizado para manipular arquivos comprimidos no formato bzip2.",
            "ejemplo": "\n                import bz2\n\n                with bz2.open('arquivo.bz2', 'rb') as arquivo:\n                    conteudo = arquivo.read()\n                    print(conteudo)\n                "
        },
        "bool_": {
            "significado": "Tipo de dado do NumPy para valores booleanos, similar ao `bool` do Python.",
            "uso": "É utilizado em operações com arrays do NumPy para representar valores booleanos.",
            "ejemplo": "\n                import numpy as np\n\n                valor = np.bool_(True)\n                print(valor)  # Saída: True\n                "
        }
    },
    "c": {
        "callable": {
            "significado": "Verifica se um objeto é invocável (como uma função ou uma classe).",
            "uso": "É utilizado para determinar se um objeto pode ser chamado.",
            "exemplo": "\n                def funcao():\n                    return \"Olá\"\n\n                print(callable(funcao))  # Saída: True\n                print(callable(42))  # Saída: False\n                "
        },
        "chr": {
            "significado": "Retorna o caractere Unicode correspondente a um número inteiro.",
            "uso": "É utilizado para converter um código Unicode em sua representação de caractere.",
            "exemplo": "\n                print(chr(65))  # Saída: 'A'\n                print(chr(8364))  # Saída: '€'\n                "
        },
        "class": {
            "significado": "Palavra-chave para definir uma classe em Python.",
            "uso": "É utilizada para criar objetos personalizados com atributos e métodos.",
            "exemplo": "\n                class Pessoa:\n                    def __init__(self, nome):\n                        self.nome = nome\n\n                    def cumprimentar(self):\n                        print(f\"Olá, meu nome é {self.nome}\")\n\n                p = Pessoa(\"João\")\n                p.cumprimentar()  # Saída: Olá, meu nome é João\n                "
        },
        "classmethod": {
            "significado": "Define um método de classe, que recebe a classe como primeiro argumento em vez de uma instância.",
            "uso": "É utilizado para criar métodos que afetam a classe como um todo.",
            "exemplo": "\n                class MinhaClasse:\n                    contador = 0\n\n                    @classmethod\n                    def incrementar(cls):\n                        cls.contador += 1\n\n                MinhaClasse.incrementar()\n                print(MinhaClasse.contador)  # Saída: 1\n                "
        },
        "compile": {
            "significado": "Compila uma string de código em um objeto executável de Python.",
            "uso": "É utilizado para compilar código dinâmico a partir de texto ou arquivos.",
            "exemplo": "\n                codigo = \"print('Olá Mundo')\"\n                compilado = compile(codigo, '<string>', 'exec')\n                exec(compilado)  # Saída: Olá Mundo\n                "
        },
        "complex": {
            "significado": "Cria um número complexo em Python.",
            "uso": "É utilizado para representar números complexos com parte real e imaginária.",
            "exemplo": "\n                c = complex(2, 3)\n                print(c)  # Saída: (2+3j)\n                print(c.real, c.imag)  # Saída: 2.0 3.0\n                "
        },
        "continue": {
            "significado": "Palavra-chave que salta para a próxima iteração de um loop.",
            "uso": "É utilizada para ignorar o restante do código na iteração atual.",
            "exemplo": "\n                for i in range(5):\n                    if i == 2:\n                        continue\n                    print(i)  # Saída: 0 1 3 4\n                "
        },
        "copy": {
            "significado": "Cria uma cópia superficial de um objeto.",
            "uso": "É utilizada para duplicar estruturas de dados sem duplicar objetos aninhados.",
            "exemplo": "\n                import copy\n\n                lista = [1, 2, [3, 4]]\n                copia = copy.copy(lista)\n                print(copia)  # Saída: [1, 2, [3, 4]]\n                "
        },
        "coroutine": {
            "significado": "Objeto que representa uma função assíncrona suspensa.",
            "uso": "É utilizada para lidar com tarefas assíncronas usando `async` e `await`.",
            "exemplo": "\n                async def tarefa():\n                    print(\"Início\")\n                    await asyncio.sleep(1)\n                    print(\"Fim\")\n\n                import asyncio\n                asyncio.run(tarefa())  # Saída: Início... Fim\n                "
        },
        "count": {
            "significado": "Retorna o número de ocorrências de um elemento em uma coleção.",
            "uso": "É utilizada para contar quantas vezes um elemento aparece em uma lista ou string.",
            "exemplo": "\n                lista = [1, 2, 2, 3]\n                print(lista.count(2))  # Saída: 2\n                "
        },
        "clear": {
            "significado": "Remove todos os elementos de uma lista ou dicionário.",
            "uso": "É utilizada para esvaziar o conteúdo de uma lista ou dicionário.",
            "exemplo": "\n                lista = [1, 2, 3]\n                lista.clear()\n                print(lista)  # Saída: []\n                "
        },
        "cmath": {
            "significado": "Módulo que fornece funções matemáticas para trabalhar com números complexos.",
            "uso": "É utilizado para realizar operações matemáticas em números complexos.",
            "exemplo": "\n                import cmath\n\n                numero = cmath.sqrt(-1)\n                print(numero)  # Saída: 1j\n                "
        },
        "chain": {
            "significado": "Função que combina vários iteradores em um só.",
            "uso": "É utilizada para concatenar múltiplos iteradores.",
            "exemplo": "\n                import itertools\n\n                a = [1, 2, 3]\n                b = [4, 5, 6]\n                resultado = list(itertools.chain(a, b))\n                print(resultado)  # Saída: [1, 2, 3, 4, 5, 6]\n                "
        },
        "csv": {
            "significado": "Módulo para ler e escrever arquivos em formato CSV (Comma Separated Values).",
            "uso": "É utilizado para manipular arquivos CSV.",
            "exemplo": "\n                import csv\n\n                with open('arquivo.csv', mode='w', newline='') as arquivo:\n                    writer = csv.writer(arquivo)\n                    writer.writerow(['Nome', 'Idade'])\n                    writer.writerow(['Ana', 30])\n                "
        },
        "copyreg": {
            "significado": "Módulo que fornece funções para registrar objetos para cópia e desacoplamento.",
            "uso": "É utilizado para personalizar o comportamento de cópia e armazenamento de objetos.",
            "exemplo": "\n                import copyreg\n\n                def criar_pessoa(nome, idade):\n                    return {'nome': nome, 'idade': idade}\n\n                copyreg.pickle(dict, criar_pessoa)\n                "
        },
        "counter": {
            "significado": "Classe no módulo `collections` que conta elementos hasháveis em uma sequência.",
            "uso": "É utilizada para contar a frequência de elementos em um iterável.",
            "exemplo": "\n                from collections import Counter\n\n                contador = Counter([1, 2, 2, 3, 3, 3])\n                print(contador)  # Saída: Counter({3: 3, 2: 2, 1: 1})\n                "
        },
        "cProfile": {
            "significado": "Módulo para a medição do desempenho de programas em Python.",
            "uso": "É utilizado para fazer perfis de código e analisar a eficiência do programa.",
            "exemplo": "\n                import cProfile\n\n                def funcao():\n                    for i in range(1000):\n                        pass\n\n                cProfile.run('funcao()')\n                "
        },
        "capitalize": {
            "significado": "Método de string que converte a primeira letra em maiúscula e o resto em minúsculas.",
            "uso": "É utilizado para capitalizar a primeira letra de uma string.",
            "exemplo": "\n                texto = 'ola mundo'\n                print(texto.capitalize())  # Saída: 'Ola mundo'\n                "
        },
        "center": {
            "significado": "Método de string que centraliza uma string dentro de um campo de comprimento especificado.",
            "uso": "É utilizado para alinhar texto no centro de uma string com preenchimento.",
            "exemplo": "\n                texto = 'ola'\n                print(texto.center(10, '*'))  # Saída: '**ola****'\n                "
        },
        "ceil": {
            "significado": "Função do módulo `math` que retorna o inteiro mais próximo maior ou igual a um número dado.",
            "uso": "É utilizada para arredondar um número para cima.",
            "exemplo": "\n                import math\n\n                numero = 3.4\n                print(math.ceil(numero))  # Saída: 4\n                "
        },
        "call": {
            "significado": "Método utilizado para invocar um objeto que é callable, como funções ou classes.",
            "uso": "É utilizado para chamar um objeto que pode ser executado.",
            "exemplo": "\n                def saudacao():\n                    return 'Olá'\n\n                print(callable(saudacao))  # Saída: True\n                "
        },
        "clamp": {
            "significado": "Função que restringe um valor dentro de um intervalo especificado.",
            "uso": "É utilizada para garantir que um valor permaneça dentro de um intervalo definido.",
            "exemplo": "\n                def clamp(valor, minimo, maximo):\n                    return max(minimo, min(valor, maximo))\n\n                print(clamp(5, 1, 10))  # Saída: 5\n                "
        },
        "choice": {
            "significado": "Função do módulo `random` que seleciona um elemento aleatório de uma sequência.",
            "uso": "É utilizada para escolher um valor aleatório de uma lista ou sequência.",
            "exemplo": "\n                import random\n\n                lista = [1, 2, 3, 4, 5]\n                print(random.choice(lista))  # Saída: um valor aleatório da lista\n                "
        },
        "collections": {
            "significado": "Módulo que implementa tipos de dados especializados como `Counter`, `deque`, `OrderedDict`, entre outros.",
            "uso": "É utilizado para trabalhar com coleções de dados de forma eficiente.",
            "exemplo": "\n                from collections import deque\n\n                fila = deque([1, 2, 3])\n                fila.append(4)\n                print(fila)  # Saída: deque([1, 2, 3, 4])\n                "
        },
        "compress": {
            "significado": "Função no módulo `itertools` que permite comprimir elementos de um iterável.",
            "uso": "É utilizada para filtrar os elementos de um iterável com base em uma condição booleana.",
            "exemplo": "\n                import itertools\n\n                dados = [1, 2, 3, 4, 5]\n                condicoes = [True, False, True, False, True]\n                resultado = list(itertools.compress(dados, condicoes))\n                print(resultado)  # Saída: [1, 3, 5]\n                "
        },
        "complex_conjugate": {
            "significado": "Método dos números complexos em Python que retorna o conjugado complexo de um número.",
            "uso": "É utilizado para obter o conjugado de um número complexo.",
            "exemplo": "\n                numero_complexo = 3 + 4j\n                print(numero_complexo.conjugate())  # Saída: (3-4j)\n                "
        },
        "ctypes": {
            "significado": "Módulo em Python que permite interagir com bibliotecas de C e realizar chamadas de funções de baixo nível.",
            "uso": "É utilizado para trabalhar com tipos de dados e funções de bibliotecas externas escritas em C.",
            "exemplo": "\n                import ctypes\n\n                # Criar uma variável de tipo inteiro\n                valor = ctypes.c_int(5)\n                print(valor.value)  # Saída: 5\n                "
        },
        "clear_screen": {
            "significado": "Função utilizada para limpar a tela do console.",
            "uso": "É utilizada para remover o conteúdo visível do terminal ou console.",
            "exemplo": "\n                import os\n\n                def clear_screen():\n                    os.system('cls' if os.name == 'nt' else 'clear')\n\n                clear_screen()\n                "
        },
        "call_later": {
            "significado": "Método utilizado para agendar a execução de uma função após um certo tempo.",
            "uso": "É utilizado em programação assíncrona para executar tarefas após um atraso.",
            "exemplo": "\n                import asyncio\n\n                async def tarefa():\n                    print('Tarefa executada')\n\n                asyncio.get_event_loop().call_later(2, asyncio.create_task, tarefa())\n                "
        },
        "chunk": {
            "significado": "Técnica que divide um iterável em partes menores ou blocos.",
            "uso": "É utilizada para dividir grandes volumes de dados em partes mais manejáveis.",
            "exemplo": "\n                def chunk(iteravel, tamanho):\n                    for i in range(0, len(iteravel), tamanho):\n                        yield iteravel[i:i + tamanho]\n\n                lista = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n                for bloco in chunk(lista, 3):\n                    print(bloco)  # Saída: [1, 2, 3], [4, 5, 6], [7, 8, 9]\n                "
        },
        "cycle": {
            "significado": "Função no módulo `itertools` que cria um iterador que repete indefinidamente uma sequência.",
            "uso": "É utilizada para percorrer um iterável em loop infinito.",
            "exemplo": "\n                import itertools\n\n                ciclo = itertools.cycle([1, 2, 3])\n                for i in range(6):\n                    print(next(ciclo))  # Saída: 1, 2, 3, 1, 2, 3\n                "
        },
        "coerce": {
            "significado": "Função que tenta converter um valor em um tipo compatível.",
            "uso": "Era utilizada para forçar a conversão de um valor para um tipo de dados específico.",
            "exemplo": "\n                # A função coerce foi removida em versões modernas do Python.\n                "
        },
        "current_thread": {
            "significado": "Método do módulo `threading` que retorna a thread atual de execução.",
            "uso": "É utilizado para obter a thread de execução onde o código está sendo executado.",
            "exemplo": "\n                import threading\n\n                def mostrar_thread():\n                    print(threading.current_thread())\n\n                mostrar_thread()\n                "
        },
        "configparser": {
            "significado": "Módulo que permite manipular arquivos de configuração, como arquivos INI.",
            "uso": "É utilizado para ler, escrever e modificar arquivos de configuração.",
            "exemplo": "\n                import configparser\n\n                config = configparser.ConfigParser()\n                config.read('config.ini')\n\n                print(config['DEFAULT']['color'])  # Saída: vermelho\n                "
        },
        "compileall": {
            "significado": "Módulo em Python que compila todos os arquivos `.py` em um diretório e seus subdiretórios.",
            "uso": "É utilizado para compilar código Python para bytecode, o que pode melhorar o desempenho da execução.",
            "exemplo": "\n                import compileall\n\n                compileall.compile_dir('meu_diretorio')\n                "
        },
        "copytree": {
            "significado": "Função no módulo `shutil` que copia um diretório completo, incluindo seu conteúdo, para outro destino.",
            "uso": "É utilizada para copiar um diretório e todo o seu conteúdo para um novo local.",
            "exemplo": "\n                import shutil\n\n                shutil.copytree('origem', 'destino')\n                "
        }
    },
    "d": {
        "def": {
            "significado": "Palavra-chave em Python usada para definir uma função.",
            "uso": "É utilizada para criar uma nova função com um nome e um bloco de código.",
            "exemplo": "\n                def saudacao():\n                    print('Olá Mundo')\n\n                saudacao()  # Saída: Olá Mundo\n                "
        },
        "delattr": {
            "significado": "Função que remove um atributo de um objeto em Python.",
            "uso": "É utilizada para excluir um atributo específico de um objeto.",
            "exemplo": "\n                class Pessoa:\n                    def __init__(self, nome):\n                        self.nome = nome\n\n                p = Pessoa('João')\n                delattr(p, 'nome')\n                print(hasattr(p, 'nome'))  # Saída: False\n                "
        },
        "dataframe": {
            "significado": "Estrutura de dados bidimensional na biblioteca Pandas, similar a uma tabela, que permite armazenar dados de diferentes tipos.",
            "uso": "É utilizada para manipular grandes volumes de dados tabulares em Python.",
            "exemplo": "\n                import pandas as pd\n\n                dados = {'Nome': ['João', 'Ana'], 'Idade': [28, 22]}\n                df = pd.DataFrame(dados)\n                print(df)\n                "
        },
        "decode": {
            "significado": "Método usado para converter dados binários em texto em uma codificação específica.",
            "uso": "É usado para decodificar uma sequência de bytes em uma string de texto em uma codificação específica.",
            "exemplo": "\n                encoded = b'Olá Mundo'\n                decoded = encoded.decode('utf-8')\n                print(decoded)  # Saída: Olá Mundo\n                "
        },
        "decimal": {
            "significado": "Módulo em Python que fornece suporte para realizar cálculos com decimais de precisão arbitrária.",
            "uso": "É utilizado para realizar operações aritméticas precisas sem os erros de arredondamento típicos dos números de ponto flutuante.",
            "exemplo": "\n                from decimal import Decimal\n\n                x = Decimal('0.1')\n                y = Decimal('0.2')\n                print(x + y)  # Saída: 0.3\n                "
        },
        "device": {
            "significado": "Termo geral para se referir a qualquer dispositivo de hardware ou sistema onde um programa é executado.",
            "uso": "É utilizado para se referir a dispositivos como computadores, telefones móveis, etc.",
            "exemplo": "Não é um termo específico de Python, mas pode ser usado em bibliotecas como TensorFlow para se referir a dispositivos de processamento como CPU ou GPU."
        },
        "dict.get": {
            "significado": "Método dos dicionários em Python que retorna o valor de uma chave especificada ou um valor padrão se a chave não existir.",
            "uso": "É utilizado para obter o valor associado a uma chave sem gerar um erro se a chave não existir.",
            "exemplo": "\n                d = {'a': 1, 'b': 2}\n                print(d.get('a'))  # Saída: 1\n                print(d.get('c', 'Não encontrado'))  # Saída: Não encontrado\n                "
        },
        "dropna": {
            "significado": "Método em Pandas utilizado para remover valores ausentes (NaN) em um DataFrame ou Série.",
            "uso": "É utilizado para limpar os dados removendo as linhas ou colunas que contêm valores nulos.",
            "exemplo": "\n                import pandas as pd\n\n                df = pd.DataFrame({'A': [1, 2, None], 'B': [None, 3, 4]})\n                print(df.dropna())\n                "
        },
        "dtype": {
            "significado": "Propriedade dos arrays em Numpy ou das colunas em um DataFrame do Pandas que indica o tipo de dado dos elementos.",
            "uso": "É utilizada para obter ou especificar o tipo de dados de um array ou coluna.",
            "exemplo": "\n                import numpy as np\n\n                arr = np.array([1, 2, 3])\n                print(arr.dtype)  # Saída: int64\n                "
        },
        "deque.appendleft": {
            "significado": "Método do tipo de dado `deque` no módulo `collections` que adiciona um elemento ao início da deque.",
            "uso": "É utilizado para inserir um novo elemento na parte esquerda de uma deque.",
            "exemplo": "\n                from collections import deque\n\n                d = deque([2, 3, 4])\n                d.appendleft(1)\n                print(d)  # Saída: deque([1, 2, 3, 4])\n                "
        },
        "dict.update": {
            "significado": "Método dos dicionários em Python que atualiza um dicionário com os elementos de outro dicionário ou iterável.",
            "uso": "É utilizado para adicionar ou modificar elementos em um dicionário usando outro dicionário ou iterável.",
            "exemplo": "\n                d1 = {'a': 1, 'b': 2}\n                d2 = {'b': 3, 'c': 4}\n                d1.update(d2)\n                print(d1)  # Saída: {'a': 1, 'b': 3, 'c': 4}\n                "
        },
        "del": {
            "significado": "Palavra-chave em Python que remove um atributo ou um elemento de uma coleção.",
            "uso": "É utilizada para remover elementos de uma lista, atributo de um objeto ou uma variável.",
            "exemplo": "\n                lista = [1, 2, 3]\n                del lista[1]\n                print(lista)  # Saída: [1, 3]\n                "
        },
        "dict": {
            "significado": "Tipo de dado em Python que representa um dicionário, uma coleção de pares chave-valor.",
            "uso": "É utilizado para armazenar e manipular dados de forma eficiente, associando chaves únicas a valores.",
            "exemplo": "\n                d = {'a': 1, 'b': 2}\n                print(d['a'])  # Saída: 1\n                "
        },
        "dir": {
            "significado": "Função que retorna uma lista dos atributos e métodos de um objeto.",
            "uso": "É utilizada para obter informações sobre os métodos e atributos disponíveis para um objeto ou módulo.",
            "exemplo": "\n                x = [1, 2, 3]\n                print(dir(x))\n                "
        },
        "divmod": {
            "significado": "Função que recebe dois números e retorna uma tupla com o quociente e o resto da sua divisão.",
            "uso": "É utilizada para obter tanto o quociente quanto o resto de uma divisão em uma única operação.",
            "exemplo": "\n                resultado = divmod(9, 4)\n                print(resultado)  # Saída: (2, 1)\n                "
        },
        "deque": {
            "significado": "Tipo de dado no módulo `collections` do Python que representa uma fila duplamente terminada, permitindo adicionar e remover elementos de ambos os extremos de forma eficiente.",
            "uso": "É usado para implementar filas e pilhas de maneira eficiente.",
            "exemplo": "\n                from collections import deque\n\n                d = deque([1, 2, 3])\n                d.append(4)\n                print(d)  # Saída: deque([1, 2, 3, 4])\n                "
        },
        "defaultdict": {
            "significado": "Classe no módulo `collections` que estende o dicionário padrão e permite definir um valor padrão para chaves inexistentes.",
            "uso": "É usado para evitar erros ao acessar chaves não existentes, fornecendo um valor padrão.",
            "exemplo": "\n                from collections import defaultdict\n\n                d = defaultdict(int)\n                d['a'] += 1\n                print(d)  # Saída: defaultdict(<class 'int'>, {'a': 1})\n                "
        },
        "deflate": {
            "significado": "Algoritmo de compressão de dados sem perda, usado para reduzir o tamanho de arquivos.",
            "uso": "É usado para compactar dados em um formato mais eficiente.",
            "exemplo": "\n                import zlib\n\n                data = b'Olá Mundo'*100\n                compressed = zlib.compress(data)\n                print(compressed)\n                "
        },
        "deepcopy": {
            "significado": "Função do módulo `copy` que cria uma cópia profunda de um objeto, ou seja, copia todos os elementos do objeto original, incluindo objetos dentro de objetos.",
            "uso": "É usado quando é necessário fazer uma cópia completa e independente de um objeto.",
            "exemplo": "\n                import copy\n\n                original = {'a': [1, 2, 3]}\n                copia = copy.deepcopy(original)\n                copia['a'][0] = 100\n                print(original)  # Saída: {'a': [1, 2, 3]}\n                print(copia)     # Saída: {'a': [100, 2, 3]}\n                "
        },
        "detach": {
            "significado": "Método usado em objetos no Python para desvincular um objeto de seu contexto ou fluxo de dados.",
            "uso": "É usado para liberar recursos ou desvincular um objeto de seu ambiente de execução.",
            "exemplo": "\n                import torch\n\n                tensor = torch.tensor([1, 2, 3])\n                detached_tensor = tensor.detach()\n                print(detached_tensor)  # Saída: tensor([1, 2, 3])\n                "
        },
        "dump": {
            "significado": "Método da biblioteca `pickle` que serializa um objeto e o grava em um arquivo.",
            "uso": "É usado para salvar um objeto em um arquivo de forma serializada.",
            "exemplo": "\n                import pickle\n\n                data = {'a': 1, 'b': 2}\n                with open('data.pkl', 'wb') as f:\n                    pickle.dump(data, f)\n                "
        },
        "dumps": {
            "significado": "Método da biblioteca `pickle` que serializa um objeto e o retorna como uma string de bytes.",
            "uso": "É usado para converter um objeto em um formato de string para armazenamento ou transmissão.",
            "exemplo": "\n                import pickle\n\n                data = {'a': 1, 'b': 2}\n                serialized = pickle.dumps(data)\n                print(serialized)\n                "
        },
        "difference": {
            "significado": "Método de conjuntos no Python que retorna a diferença entre dois ou mais conjuntos.",
            "uso": "É usado para encontrar os elementos que estão em um conjunto, mas não nos outros.",
            "exemplo": "\n                a = {1, 2, 3}\n                b = {2, 3, 4}\n                print(a.difference(b))  # Saída: {1}\n                "
        },
        "difference_update": {
            "significado": "Método de conjuntos no Python que remove os elementos de um conjunto que estão presentes em outro conjunto.",
            "uso": "É usado para modificar um conjunto, removendo os elementos que se encontram em outro conjunto.",
            "exemplo": "\n                a = {1, 2, 3}\n                b = {2, 3, 4}\n                a.difference_update(b)\n                print(a)  # Saída: {1}\n                "
        },
        "decode_header": {
            "significado": "Função do módulo `email.header` que decodifica um cabeçalho de e-mail.",
            "uso": "É usada para decodificar um cabeçalho de e-mail que pode estar em diferentes codificações.",
            "exemplo": "\n                from email.header import decode_header\n\n                header = '=?utf-8?B?SG9sYSBNdW5kbyA8MTIzNDU+?='\n                decoded, encoding = decode_header(header)[0]\n                print(decoded.decode(encoding))  # Saída: Olá Mundo <12345>\n                "
        },
        "disk_usage": {
            "significado": "Função do módulo `shutil` que retorna o uso do disco de um caminho ou diretório.",
            "uso": "É usada para obter informações sobre o espaço usado e disponível em um sistema de arquivos.",
            "exemplo": "\n                import shutil\n\n                usage = shutil.disk_usage('/')\n                print(usage)  # Saída: usage(total=500000000, used=200000000, free=300000000)\n                "
        },
        "datetime": {
            "significado": "Módulo do Python que fornece classes para trabalhar com datas e horas.",
            "uso": "É usado para manipular e trabalhar com datas, horas e tempos em geral.",
            "exemplo": "\n                import datetime\n\n                agora = datetime.datetime.now()\n                print(agora)  # Saída: 2024-11-22 12:00:00.123456\n                "
        },
        "disk_cache": {
            "significado": "Armazenamento em cache no disco para melhorar a velocidade de acesso a dados ou resultados computacionais.",
            "uso": "É usado para armazenar temporariamente resultados ou dados no disco para evitar a necessidade de recalcular ou obter novamente os dados.",
            "exemplo": "\n                import joblib\n\n                result = joblib.Memory('cache_dir').cache(some_function)\n                "
        }
    },
    "e": {
        "enumerate": {
            "significado": "Função incorporada do Python que adiciona um contador a um iterável e o retorna como um objeto iterável de tuplas.",
            "uso": "É usada para obter tanto o índice quanto o valor dos elementos em um iterável.",
            "exemplo": "\n                lista = ['a', 'b', 'c']\n                for indice, valor in enumerate(lista):\n                    print(indice, valor)\n                # Saída:\n                # 0 a\n                # 1 b\n                # 2 c\n                "
        },
        "eval": {
            "significado": "Função incorporada do Python que avalia uma string de código como uma expressão Python.",
            "uso": "É usada para executar expressões Python contidas em uma string e retornar o resultado.",
            "exemplo": "\n                x = 2\n                resultado = eval('x + 1')\n                print(resultado)  # Saída: 3\n                "
        },
        "exec": {
            "significado": "Função incorporada do Python que executa uma string de código como um bloco de código completo.",
            "uso": "É usada para executar código Python dinamicamente.",
            "exemplo": "\n                codigo = 'for i in range(3): print(i)'\n                exec(codigo)\n                # Saída:\n                # 0\n                # 1\n                # 2\n                "
        },
        "except": {
            "significado": "Palavra-chave no Python usada para tratar exceções dentro de um bloco try-except.",
            "uso": "É usada para capturar e tratar exceções que ocorrem no bloco try.",
            "exemplo": "\n                try:\n                    x = 1 / 0\n                except ZeroDivisionError:\n                    print('Erro: Divisão por zero')\n                # Saída: Erro: Divisão por zero\n                "
        },
        "else": {
            "significado": "Palavra-chave no Python usada em estruturas de controle condicional (if, try) para executar um bloco de código se a condição não for atendida ou nenhuma exceção ocorrer.",
            "uso": "É usada para executar um bloco de código quando a condição não for atendida ou nenhuma exceção ocorrer.",
            "exemplo": "\n                if 3 > 1:\n                    print('Condição verdadeira')\n                else:\n                    print('Condição falsa')\n                # Saída: Condição verdadeira\n                "
        },
        "elif": {
            "significado": "Palavra-chave no Python usada em estruturas condicionais para verificar uma condição adicional caso as anteriores não sejam atendidas.",
            "uso": "É usada para lidar com múltiplas condições em uma estrutura if-elif-else.",
            "exemplo": "\n                x = 3\n                if x > 5:\n                    print('Maior que 5')\n                elif x == 3:\n                    print('Igual a 3')\n                else:\n                    print('Menor que 3')\n                # Saída: Igual a 3\n                "
        },
        "exit": {
            "significado": "Função incorporada do Python que finaliza a execução do programa.",
            "uso": "É usada para sair de um programa ou fechar um ambiente de execução.",
            "exemplo": "\n                import sys\n                sys.exit('Finalizando o programa')\n                # O programa é encerrado com a mensagem 'Finalizando o programa'\n                "
        },
        "end": {
            "significado": "Palavra-chave usada no Python para especificar o fim de um bloco ou a terminação de uma string.",
            "uso": "É usada principalmente nas funções de impressão para controlar o fim da saída.",
            "exemplo": "\n                print('Olá', end=' ')\n                print('Mundo')\n                # Saída: Olá Mundo\n                "
        },
        "expandtabs": {
            "significado": "Método de strings no Python que substitui os caracteres de tabulação por espaços.",
            "uso": "É usada para alinhar texto substituindo as tabulações por um número determinado de espaços.",
            "exemplo": "\n                texto = 'Olá\tMundo'\n                print(texto.expandtabs(4))\n                # Saída: Olá   Mundo\n                "
        },
        "encode": {
            "significado": "Método de strings no Python que codifica uma string em uma sequência de bytes usando um codificador específico.",
            "uso": "É usada para converter uma string em uma sequência de bytes para ser armazenada ou transmitida em formatos específicos.",
            "exemplo": "\n                texto = 'Olá Mundo'\n                encoded = texto.encode('utf-8')\n                print(encoded)\n                # Saída: b'Olá Mundo'\n                "
        },
        "element": {
            "significado": "Um item individual dentro de uma coleção ou estrutura de dados.",
            "uso": "É usada para se referir a um objeto dentro de uma lista, conjunto, dicionário, etc.",
            "exemplo": "\n                lista = [1, 2, 3]\n                print(lista[0])  # Saída: 1\n                "
        },
        "error": {
            "significado": "Condição anômala na execução de um programa que interrompe seu fluxo normal.",
            "uso": "É usada para indicar que algo deu errado durante a execução do código.",
            "exemplo": "\n                try:\n                    1 / 0\n                except ZeroDivisionError as e:\n                    print(f'Erro: {e}')\n                # Saída: Erro: division by zero\n                "
        },
        "exception": {
            "significado": "Evento que altera o fluxo normal de execução do programa, geralmente devido a um erro.",
            "uso": "É usada para tratar erros no código e executar ações específicas quando ocorrem.",
            "exemplo": "\n                try:\n                    int('a')\n                except ValueError:\n                    print('Erro: não é possível converter para inteiro')\n                # Saída: Erro: não é possível converter para inteiro\n                "
        },
        "evaluate": {
            "significado": "Executar ou calcular o valor de uma expressão ou função.",
            "uso": "É usada para obter o resultado de uma expressão.",
            "exemplo": "\n                x = 5\n                resultado = eval('x + 2')\n                print(resultado)  # Saída: 7\n                "
        },
        "elements": {
            "significado": "Itens ou componentes individuais dentro de um conjunto ou coleção.",
            "uso": "É usada para se referir às partes de uma estrutura de dados.",
            "exemplo": "\n                conjunto = {1, 2, 3}\n                for elemento in conjunto:\n                    print(elemento)\n                # Saída:\n                # 1\n                # 2\n                # 3\n                "
        },
        "exponential": {
            "significado": "Relacionado com a operação matemática de exponenciação, que calcula o valor de uma base elevada a um expoente.",
            "uso": "É usada para realizar cálculos exponenciais.",
            "exemplo": "\n                import math\n                resultado = math.exp(2)\n                print(resultado)  # Saída: 7.3890560989306495\n                "
        },
        "enumerations": {
            "significado": "Uma lista ou conjunto de elementos, muitas vezes com um valor associado ou um identificador.",
            "uso": "É usada para representar um conjunto de valores possíveis de uma variável.",
            "exemplo": "\n                from enum import Enum\n\n                class Cor(Enum):\n                    VERMELHO = 1\n                    VERDE = 2\n                    AZUL = 3\n\n                print(Cor.VERMELHO)  # Saída: Cor.VERMELHO\n                "
        },
        "encode_utf8": {
            "significado": "Método de codificação que converte uma string de caracteres em uma sequência de bytes usando o formato UTF-8.",
            "uso": "É usada para converter texto em uma representação binária usando UTF-8.",
            "exemplo": "\n                texto = 'Olá Mundo'\n                encoded = texto.encode('utf-8')\n                print(encoded)  # Saída: b'Olá Mundo'\n                "
        },
        "execfile": {
            "significado": "Função que executa um arquivo Python como se fosse um script.",
            "uso": "É usada para executar um arquivo Python externo.",
            "exemplo": "\n                # Este comando está disponível apenas no Python 2\n                execfile('script.py')\n                "
        },
        "edit_distance": {
            "significado": "Medida que calcula a diferença entre duas strings com base nas operações necessárias para converter uma na outra.",
            "uso": "É usada para comparar quão semelhantes são duas strings e determinar quantas mudanças são necessárias para torná-las idênticas.",
            "exemplo": "\n                from nltk.metrics import edit_distance\n\n                distancia = edit_distance('kitten', 'sitting')\n                print(distancia)  # Saída: 3\n                "
        },
        "eval_input": {
            "significado": "Função que avalia uma entrada do usuário, normalmente através da função `input()`.",
            "uso": "É usada para obter e avaliar uma entrada fornecida pelo usuário.",
            "exemplo": "\n                entrada = input('Digite um número: ')\n                resultado = eval(entrada)\n                print(resultado)\n                "
        },
        "xceed": {
            "significado": "Termo usado para descrever algo que supera ou excede um limite ou expectativa.",
            "uso": "É usada para indicar que algo superou um padrão ou limite.",
            "exemplo": "A nova atualização excede nossas expectativas em termos de desempenho."
        },
        "expected": {
            "significado": "Algo antecipado ou previsto, com base em expectativas ou previsões.",
            "uso": "É usada para descrever o que se espera que aconteça em uma situação.",
            "exemplo": "O resultado esperado era um aumento na velocidade de processamento."
        },
        "encode_base64": {
            "significado": "Método de codificação que converte dados binários em uma representação de texto em base 64.",
            "uso": "É usada para codificar dados binários em uma string de texto legível em base 64.",
            "exemplo": "\n                import base64\n                encoded = base64.b64encode(b'olá')\n                print(encoded)  # Saída: b'b2xh'\n                "
        },
        "execute": {
            "significado": "Realizar ou executar um conjunto de instruções ou um programa.",
            "uso": "É usada para colocar em prática uma ação ou executar código.",
            "exemplo": "\n                def funcao():\n                    print('Executando...')\n                funcao()  # Saída: Executando...\n                "
        },
        "exit_code": {
            "significado": "Valor retornado por um programa ou script ao finalizar, indicando se foi executado corretamente ou se ocorreu um erro.",
            "uso": "É usada para verificar se um programa foi concluído com sucesso ou se ocorreu um erro.",
            "exemplo": "\n                import sys\n                sys.exit(0)  # Saída: 0 indica sucesso, outro número indica erro.\n                "
        },
        "evaluate_expression": {
            "significado": "Avaliar uma expressão para obter seu resultado.",
            "uso": "É usada para calcular ou obter o valor de uma expressão matemática ou lógica.",
            "exemplo": "\n                resultado = eval('3 + 5')\n                print(resultado)  # Saída: 8\n                "
        },
        "environment": {
            "significado": "O contexto ou conjunto de condições em que um programa ou aplicação é executado.",
            "uso": "É usada para se referir ao conjunto de variáveis, configurações e recursos disponíveis para um programa.",
            "exemplo": "\n                import os\n                print(os.environ)  # Saída: Mostra as variáveis de ambiente do sistema.\n                "
        },
        "environment_variable": {
            "significado": "Variável que armazena informações sobre o ambiente do sistema ou aplicação.",
            "uso": "É usada para armazenar configurações específicas que afetam o comportamento dos programas.",
            "exemplo": "\n                import os\n                print(os.getenv('PATH'))  # Saída: Mostra a variável de ambiente PATH.\n                "
        },
        "exp": {
            "significado": "Função matemática que calcula a exponencial de um número, ou seja, e elevado à potência desse número.",
            "uso": "É usada para realizar cálculos exponenciais.",
            "exemplo": "\n                import math\n                resultado = math.exp(1)\n                print(resultado)  # Saída: 2.718281828459045\n                "
        },
        "exception_handling": {
            "significado": "Processo de gerenciar e responder a erros ou exceções que ocorrem durante a execução de um programa.",
            "uso": "É usada para capturar e gerenciar erros, garantindo que o programa não pare inesperadamente.",
            "exemplo": "\n                try:\n                    valor = 1 / 0\n                except ZeroDivisionError as e:\n                    print(f'Erro: {e}')  # Saída: Erro: division by zero\n                "
        },
        "expand": {
            "significado": "Ampliar ou aumentar o tamanho ou o alcance de algo.",
            "uso": "É usada para fazer algo maior ou incluir mais informações.",
            "exemplo": "\n                texto = \"Olá\"\n                print(texto.expandtabs(4))  # Saída: 'Olá' com tabulações ampliadas\n                "
        },
        "environment_config": {
            "significado": "Configuração relacionada ao ambiente de execução de um programa ou sistema.",
            "uso": "É usada para especificar ou ajustar parâmetros que afetam o funcionamento de um programa ou aplicação.",
            "exemplo": "\n                config = {\n                    'host': 'localhost',\n                    'port': 8080\n                }\n                print(config)  # Saída: {'host': 'localhost', 'port': 8080}\n                "
        },
        "equal": {
            "significado": "Indica que dois elementos são idênticos em valor.",
            "uso": "É usada para comparar dois valores ou expressões para verificar se são iguais.",
            "exemplo": "\n                a = 5\n                b = 5\n                print(a == b)  # Saída: True\n                "
        },
        "error_handling": {
            "significado": "Processo de gerenciar erros e exceções que ocorrem durante a execução de um programa.",
            "uso": "É usada para capturar e gerenciar erros de maneira controlada para evitar que o programa termine inesperadamente.",
            "exemplo": "\n                try:\n                    valor = 10 / 0\n                except ZeroDivisionError:\n                    print('Erro de divisão por zero')  # Saída: Erro de divisão por zero\n                "
        },
        "event": {
            "significado": "Ação ou evento que pode ser detectado e gerenciado em um programa.",
            "uso": "É usada para gerenciar e responder a atividades ou mudanças em um sistema ou programa.",
            "exemplo": "\n                import tkinter as tk\n                def click():\n                    print('Botão pressionado')\n                root = tk.Tk()\n                button = tk.Button(root, text=\"Clique em mim\", command=click)\n                button.pack()\n                root.mainloop()  # Saída: Mostra um botão que, ao ser pressionado, executa o evento click\n                "
        },
        "event_loop": {
            "significado": "Ciclo contínuo que espera e gerencia eventos ou tarefas assíncronas em um programa.",
            "uso": "É usada para executar tarefas ou responder a eventos em ordem, sem bloquear o fluxo principal de execução.",
            "exemplo": "\n                import asyncio\n                async def hello():\n                    print(\"Olá\")\n                asyncio.run(hello())  # Saída: Olá\n                "
        },
        "exception_type": {
            "significado": "O tipo específico de uma exceção ou erro que ocorre em um programa.",
            "uso": "É usada para identificar qual tipo de erro ocorreu e tomar ações adequadas.",
            "exemplo": "\n                try:\n                    valor = 10 / 0\n                except ZeroDivisionError as e:\n                    print(f\"Tipo de erro: {type(e)}\")  # Saída: Tipo de erro: <class 'ZeroDivisionError'>\n                "
        },
        "error_message": {
            "significado": "Mensagem que descreve o erro ou problema ocorrido durante a execução de um programa.",
            "uso": "É usada para fornecer detalhes sobre o que falhou ou causou uma exceção.",
            "exemplo": "\n                try:\n                    x = int(\"abc\")\n                except ValueError as e:\n                    print(f\"Mensagem de erro: {e}\")  # Saída: Mensagem de erro: invalid literal for int() with base 10: 'abc'\n                "
        },
        "extract": {
            "significado": "Obter uma parte específica de um conjunto de dados ou informações.",
            "uso": "É usada para retirar ou extrair um componente específico de um conjunto maior de dados.",
            "exemplo": "\n                texto = 'Olá Mundo'\n                print(texto[0:4])  # Saída: Olá\n                "
        },
        "exit_status": {
            "significado": "Código de saída que indica se um programa ou processo terminou corretamente ou com erro.",
            "uso": "É usada para verificar se um processo ou comando terminou com sucesso ou se ocorreu algum erro.",
            "exemplo": "\n                import sys\n                sys.exit(0)  # Saída: 0 indica sucesso, qualquer outro número indica erro.\n                "
        }
    },
    "f": {
        "filemode": {
            "significado": "Modo de abertura de um arquivo que determina as operações que podem ser realizadas nele.",
            "uso": "É usada para especificar o tipo de acesso desejado para um arquivo (leitura, escrita, etc.).",
            "exemplo": "\n                arquivo = open('arquivo.txt', 'r')  # 'r' indica modo de leitura somente\n                print(arquivo.mode)  # Saída: 'r'\n                "
        },
        "frozen_set": {
            "significado": "Conjunto imutável em Python, similar a um conjunto padrão, mas sem a possibilidade de modificá-lo após sua criação.",
            "uso": "É usada para criar conjuntos que não devem ser modificados após a sua criação.",
            "exemplo": "\n                conjunto = frozenset([1, 2, 3])\n                print(conjunto)  # Saída: frozenset({1, 2, 3})\n                "
        },
        "format_map": {
            "significado": "Método que retorna uma string formatada usando um dicionário ou objeto similar.",
            "uso": "É usada para realizar substituições de valores em uma string usando um mapa (como um dicionário).",
            "exemplo": "\n                dados = {'nome': 'João', 'idade': 30}\n                texto = 'Nome: {nome}, Idade: {idade}'.format_map(dados)\n                print(texto)  # Saída: Nome: João, Idade: 30\n                "
        },
        "find": {
            "significado": "Método que busca uma substring dentro de uma string e retorna o índice da primeira ocorrência.",
            "uso": "É usada para encontrar a posição de um texto dentro de outro.",
            "exemplo": "\n                texto = 'Olá Mundo'\n                print(texto.find('Mundo'))  # Saída: 5\n                "
        },
        "float32": {
            "significado": "Tipo de dado no NumPy que representa um número de ponto flutuante de 32 bits.",
            "uso": "É usada para armazenar números com decimais de forma mais eficiente em termos de memória.",
            "exemplo": "\n                import numpy as np\n                numero = np.float32(3.1415)\n                print(numero)  # Saída: 3.1415\n                "
        },
        "float64": {
            "significado": "Tipo de dado no NumPy que representa um número de ponto flutuante de 64 bits.",
            "uso": "É usada para armazenar números com decimais com maior precisão do que o tipo float32.",
            "exemplo": "\n                import numpy as np\n                numero = np.float64(3.141592653589793)\n                print(numero)  # Saída: 3.141592653589793\n                "
        },
        "formatting": {
            "significado": "O processo de aplicar um formato a dados ou strings, como alinhamento, larguras e tipos de dados.",
            "uso": "É usada para organizar ou mostrar dados de forma mais legível ou específica.",
            "exemplo": "\n                texto = 'Nome: {0:10}, Idade: {1:5}'.format('João', 30)\n                print(texto)  # Saída: Nome: João      , Idade: 30\n                "
        },
        "flush_output": {
            "significado": "Método utilizado para esvaziar o buffer de saída, forçando que os dados sejam escritos imediatamente.",
            "uso": "É usada quando se quer garantir que todos os dados pendentes no buffer de saída sejam escritos no destino.",
            "exemplo": "\n                import sys\n                sys.stdout.write('Olá Mundo')\n                sys.stdout.flush()  # Saída: 'Olá Mundo' imediatamente\n                "
        },
        "function_definition": {
            "significado": "O processo de criar uma função em Python usando a palavra-chave 'def'.",
            "uso": "É usada para declarar funções reutilizáveis que executam um bloco de código específico.",
            "exemplo": "\n                def saudar(nome):\n                    return f'Olá {nome}'\n                print(saudar('João'))  # Saída: Olá João\n                "
        },
        "filepath": {
            "significado": "Caminho ou endereço de um arquivo no sistema de arquivos.",
            "uso": "É usada para especificar a localização de um arquivo no sistema de arquivos.",
            "exemplo": "\n                import os\n                caminho = os.path.join('pasta', 'arquivo.txt')\n                print(caminho)  # Saída: pasta/arquivo.txt\n                "
        },
        "flask": {
            "significado": "Um micro-framework em Python para o desenvolvimento de aplicações web.",
            "uso": "É usada para criar aplicações web de maneira simples e rápida com rotas, formulários e outras funcionalidades.",
            "exemplo": "\n                from flask import Flask\n                app = Flask(__name__)\n\n                @app.route('/')\n                def hello():\n                    return 'Olá Mundo'\n\n                app.run()  # Saída: 'Olá Mundo' em uma aplicação web\n                "
        },
        "filtering": {
            "significado": "Processo de selecionar elementos de uma coleção que atendem a uma condição específica.",
            "uso": "É usada para extrair elementos de uma lista, conjunto ou qualquer iterável com base em uma condição.",
            "exemplo": "\n                lista = [1, 2, 3, 4, 5]\n                resultado = filter(lambda x: x > 2, lista)\n                print(list(resultado))  # Saída: [3, 4, 5]\n                "
        },
        "futures": {
            "significado": "Módulo que fornece uma interface para executar tarefas assíncronas e paralelizadas.",
            "uso": "É usada para executar funções de maneira concorrente usando threads ou processos.",
            "exemplo": "\n                from concurrent.futures import ThreadPoolExecutor\n\n                def tarefa(x):\n                    return x * x\n\n                with ThreadPoolExecutor() as executor:\n                    resultados = executor.map(tarefa, [1, 2, 3])\n                    print(list(resultados))  # Saída: [1, 4, 9]\n                "
        },
        "fold": {
            "significado": "Função que aplica uma operação acumulativa sobre os elementos de uma sequência.",
            "uso": "É usada para reduzir uma sequência de elementos a um único valor aplicando uma operação binária.",
            "exemplo": "\n                from functools import reduce\n                lista = [1, 2, 3, 4]\n                resultado = reduce(lambda x, y: x + y, lista)\n                print(resultado)  # Saída: 10\n                "
        },
        "fromkeys": {
            "significado": "Método de dicionário que cria um novo dicionário com chaves especificadas e valores padrão.",
            "uso": "É usada para criar dicionários a partir de uma lista de chaves com um valor padrão.",
            "exemplo": "\n                dicionario = dict.fromkeys(['a', 'b', 'c'], 0)\n                print(dicionario)  # Saída: {'a': 0, 'b': 0, 'c': 0}\n                "
        },
        "flask_restful": {
            "significado": "Extensão para Flask que simplifica a criação de APIs RESTful.",
            "uso": "É usada para desenvolver aplicações web que seguem a arquitetura REST usando recursos.",
            "exemplo": "\n                from flask import Flask\n                from flask_restful import Api, Resource\n\n                app = Flask(__name__)\n                api = Api(app)\n\n                class HelloWorld(Resource):\n                    def get(self):\n                        return {'mensagem': 'Olá Mundo'}\n\n                api.add_resource(HelloWorld, '/')\n                app.run()  # Saída: 'Olá Mundo' como resposta da API\n                "
        },
        "fix": {
            "significado": "Termo geral para corrigir ou ajustar algo que não funciona corretamente.",
            "uso": "É usada quando se faz um ajuste ou correção no código ou na configuração de algo.",
            "exemplo": "\n                # Exemplo no contexto de código: correção de um erro de sintaxe\n                def corrigir_erro():\n                    print('Esta é a mensagem corrigida')\n                corrigir_erro()\n                "
        },
        "float_conversion": {
            "significado": "Processo de converter dados de outros tipos para tipo flutuante.",
            "uso": "É usada para converter valores em números de ponto flutuante (decimais).",
            "exemplo": "\n                numero = '3.14'\n                resultado = float(numero)\n                print(resultado)  # Saída: 3.14\n                "
        },
        "full_path": {
            "significado": "Caminho completo para um arquivo ou diretório no sistema de arquivos.",
            "uso": "É usada para especificar a localização exata de um arquivo ou diretório desde a raiz do sistema de arquivos.",
            "exemplo": "\n                import os\n                caminho_completo = os.path.abspath('arquivo.txt')\n                print(caminho_completo)  # Saída: /home/usuario/arquivo.txt\n                "
        },
        "filter": {
            "significado": "Função que aplica uma condição a cada elemento de um iterável e retorna os elementos que atendem à condição.",
            "uso": "É usada para selecionar apenas os elementos que atendem a uma condição específica.",
            "exemplo": "\n                lista = [1, 2, 3, 4, 5]\n                resultado = filter(lambda x: x % 2 == 0, lista)\n                print(list(resultado))  # Saída: [2, 4]\n                "
        },
        "float": {
            "significado": "Tipo de dado em Python para representar números de ponto flutuante (números com decimais).",
            "uso": "É usada para representar números que exigem decimais.",
            "exemplo": "\n                numero = 3.14\n                print(type(numero))  # Saída: <class 'float'>\n                "
        },
        "for": {
            "significado": "Palavra-chave em Python usada para iterar sobre os elementos de um iterável.",
            "uso": "É usada para executar um bloco de código repetidamente para cada elemento de um iterável.",
            "exemplo": "\n                for i in range(5):\n                    print(i)\n                # Saída:\n                # 0\n                # 1\n                # 2\n                # 3\n                # 4\n                "
        },
        "format": {
            "significado": "Método utilizado para formatar cadeias de texto, inserindo valores dentro delas.",
            "uso": "É usado para criar cadeias de texto mais legíveis e dinâmicas com valores variáveis.",
            "exemplo": "\n                nome = 'Juan'\n                idade = 30\n                print('Meu nome é {} e tenho {} anos'.format(nome, idade))\n                # Saída: Meu nome é Juan e tenho 30 anos\n                "
        },
        "from": {
            "significado": "Palavra-chave em Python usada para importar módulos ou funções específicas de módulos.",
            "uso": "É usada para trazer funcionalidades específicas de um módulo para o espaço de nomes atual.",
            "exemplo": "\n                from math import sqrt\n                print(sqrt(16))  # Saída: 4.0\n                "
        },
        "function": {
            "significado": "Bloco de código projetado para realizar uma tarefa específica e que pode ser reutilizado.",
            "uso": "É usado para agrupar código relacionado que realiza uma tarefa comum, permitindo reutilização e modularidade.",
            "exemplo": "\n                def saudacao(nome):\n                    return f'Olá, {nome}'\n                \n                print(saudacao('Juan'))  # Saída: Olá, Juan\n                "
        },
        "fibonacci": {
            "significado": "Sequência matemática onde cada número é a soma dos dois anteriores.",
            "uso": "É usada para gerar a sequência de Fibonacci, frequentemente em exercícios de programação ou algoritmos.",
            "exemplo": "\n                def fibonacci(n):\n                    if n <= 1:\n                        return n\n                    else:\n                        return fibonacci(n-1) + fibonacci(n-2)\n                \n                print(fibonacci(5))  # Saída: 5\n                "
        },
        "file": {
            "significado": "Objeto em Python que permite interagir com arquivos no sistema de arquivos.",
            "uso": "É usado para abrir, ler, escrever e manipular arquivos.",
            "exemplo": "\n                with open('arquivo.txt', 'r') as f:\n                    conteudo = f.read()\n                print(conteudo)\n                "
        },
        "fwrite": {
            "significado": "Função usada para escrever dados em um arquivo.",
            "uso": "É usada para escrever dados binários em um arquivo aberto em modo de escrita.",
            "exemplo": "\n                with open('arquivo.bin', 'wb') as f:\n                    f.write(b'Hello, World!')\n                "
        },
        "fread": {
            "significado": "Função usada para ler dados de um arquivo.",
            "uso": "É usada para ler dados binários de um arquivo aberto em modo de leitura.",
            "exemplo": "\n                with open('arquivo.bin', 'rb') as f:\n                    dados = f.read()\n                print(dados)  # Saída: b'Hello, World!'\n                "
        },
        "finally": {
            "significado": "Palavra-chave em Python que define um bloco de código que será executado sempre, independentemente de ocorrer uma exceção ou não.",
            "uso": "É usada em estruturas try-except para garantir que um bloco de código final seja executado, mesmo que ocorra um erro.",
            "exemplo": "\n                try:\n                    x = 1 / 0\n                except ZeroDivisionError:\n                    print('Divisão por zero')\n                finally:\n                    print('Este bloco sempre é executado')\n                "
        },
        "freeze": {
            "significado": "Processo de converter um objeto mutável em um objeto imutável.",
            "uso": "É usada para evitar que um objeto seja modificado após ter sido criado.",
            "exemplo": "\n                # Não há uma função explícita chamada freeze, mas em alguns casos como com `frozenset` pode-se obter o mesmo efeito\n                a = frozenset([1, 2, 3])\n                print(a)  # Saída: frozenset({1, 2, 3})\n                "
        },
        "flush": {
            "significado": "Método usado para esvaziar os buffers de um arquivo, garantindo que todos os dados sejam escritos no disco.",
            "uso": "É usada quando é necessário garantir que os dados armazenados em um buffer sejam imediatamente escritos no arquivo.",
            "exemplo": "\n                with open('arquivo.txt', 'w') as f:\n                    f.write('Olá')\n                    f.flush()  # Garante que os dados sejam escritos no arquivo\n                "
        },
        "fstring": {
            "significado": "Cadeia de texto que permite inserir expressões dentro da cadeia de forma mais legível e eficiente.",
            "uso": "É usada para criar cadeias de texto interpoladas, onde variáveis podem ser inseridas diretamente dentro da cadeia.",
            "exemplo": "\n                nome = 'Juan'\n                idade = 30\n                print(f'Meu nome é {nome} e tenho {idade} anos')  # Saída: Meu nome é Juan e tenho 30 anos\n                "
        },
        "factorial": {
            "significado": "Função matemática que calcula o produto de todos os números inteiros positivos até um número dado.",
            "uso": "É usada para calcular o fatorial de um número, frequentemente em algoritmos de combinatória e probabilidade.",
            "exemplo": "\n                import math\n                print(math.factorial(5))  # Saída: 120\n                "
        },
        "frozen": {
            "significado": "Objeto imutável que não pode ser modificado após sua criação.",
            "uso": "É usado para criar objetos que não podem ser alterados, como um `frozenset` em Python.",
            "exemplo": "\n                a = frozenset([1, 2, 3])\n                print(a)  # Saída: frozenset({1, 2, 3})\n                "
        },
        "filterfalse": {
            "significado": "Função que retorna um iterador que filtra os elementos de um iterável, excluindo os que retornam `True` na função fornecida.",
            "uso": "É usada para obter os elementos de um iterável para os quais a função retorna `False`.",
            "exemplo": "\n                from itertools import filterfalse\n                resultado = filterfalse(lambda x: x % 2 == 0, [1, 2, 3, 4, 5])\n                print(list(resultado))  # Saída: [1, 3, 5]\n                "
        },
        "fuzzy": {
            "significado": "Relacionado à lógica difusa, que permite lidar com informações imprecisas ou incertas.",
            "uso": "É usado em sistemas que precisam processar dados aproximados ou incertos.",
            "exemplo": "\n                # Exemplo de uma biblioteca de lógica difusa como `fuzzywuzzy` (para correspondência difusa de texto)\n                from fuzzywuzzy import fuzz\n                print(fuzz.ratio('hola', 'Hola'))  # Saída: 100\n                "
        },
        "fibonacci_sequence": {
            "significado": "Sequência matemática onde cada número é a soma dos dois anteriores.",
            "uso": "É usada para gerar a sequência de Fibonacci.",
            "exemplo": "\n                def fibonacci(n):\n                    sequencia = [0, 1]\n                    while len(sequencia) < n:\n                        sequencia.append(sequencia[-1] + sequencia[-2])\n                    return sequencia\n                \n                print(fibonacci(10))  # Saída: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n                "
        },
        "format_spec": {
            "significado": "Cadeia usada para definir como os valores devem ser apresentados dentro de um formato de cadeia.",
            "uso": "É usada para especificar o formato dos valores dentro de uma cadeia, como precisão decimal, alinhamento, entre outros.",
            "exemplo": "\n                pi = 3.14159\n                print(f'{pi:.2f}')  # Saída: 3.14\n                "
        },
        "fork": {
            "significado": "Processo de criar um novo processo, copiado do processo original.",
            "uso": "É usado na programação de sistemas para criar processos secundários.",
            "exemplo": "\n                import os\n                pid = os.fork()\n                if pid > 0:\n                    print(f'Processo pai, PID: {pid}')\n                else:\n                    print(f'Processo filho, PID: {os.getpid()}')\n                "
        },
        "forking": {
            "significado": "Ação de criar um novo processo ou subprocesso a partir de um processo principal.",
            "uso": "É usado em sistemas operacionais para criar processos adicionais que executam tarefas de forma concorrente.",
            "exemplo": "\n                import os\n                pid = os.fork()\n                # Semelhante ao exemplo de 'fork', mas abrangendo o conceito de 'forking'\n                "
        },
        "first": {
            "significado": "Ação de obter o primeiro elemento de uma sequência ou iterável.",
            "uso": "É usado para acessar o primeiro valor de um iterável, como uma lista ou conjunto.",
            "exemplo": "\n                lista = [1, 2, 3, 4]\n                print(lista[0])  # Saída: 1\n                "
        },
        "float_format": {
            "significado": "Formato que define como os números de ponto flutuante devem ser apresentados em uma cadeia.",
            "uso": "É usado para especificar a quantidade de casas decimais a ser exibida em um número de ponto flutuante.",
            "exemplo": "\n                pi = 3.14159\n                print(f'{pi:.2f}')  # Saída: 3.14\n                "
        },
        "filter_none": {
            "significado": "Função que filtra elementos de um iterável, excluindo os valores `None`.",
            "uso": "É usada para excluir valores `None` de uma sequência.",
            "exemplo": "\n                lista = [1, None, 2, None, 3]\n                resultado = filter(None, lista)\n                print(list(resultado))  # Saída: [1, 2, 3]\n                "
        },
        "func_code": {
            "significado": "Atributo que contém o bytecode da função em Python.",
            "uso": "É usado para acessar o código da função, geralmente em contextos de depuração ou análise.",
            "exemplo": "\n                def exemplo():\n                    pass\n                \n                print(exemplo.__code__)  # Saída: <code object exemplo at 0x...>\n                "
        },
        "float_power": {
            "significado": "Función que calcula un número elevado a una potencia flotante.",
            "uso": "Se utiliza para realizar exponentiación con números flotantes.",
            "ejemplo": "\n                print(pow(2, 3.5))  # Saída: 11.313708498984761\n                "
        },
        "format_string": {
            "significado": "Cadena que define la estructura de un valor que se desea mostrar, utilizando especificadores de formato.",
            "uso": "Se utiliza para definir cómo deben mostrarse los valores en una cadena, como el número de decimales o la alineación.",
            "ejemplo": "\n                nombre = 'Juan'\n                edad = 25\n                print(f'Nombre: {nombre}, Edad: {edad}')  # Saída: Nombre: Juan, Edad: 25\n                "
        },
        "filename": {
            "significado": "Cadena que representa el nombre de un archivo en el sistema de archivos.",
            "uso": "Se utiliza para especificar el nombre y la ubicación de un archivo que se desea manipular.",
            "ejemplo": "\n                archivo = 'documento.txt'\n                with open(archivo, 'r') as f:\n                    print(f.read())\n                "
        },
        "file_object": {
            "significado": "Objeto que representa un archivo abierto en Python, a través del cual se puede leer, escribir o manipular el archivo.",
            "uso": "Se utiliza para interactuar con archivos abiertos en Python, accediendo a sus contenidos o modificándolos.",
            "ejemplo": "\n                with open('documento.txt', 'r') as f:\n                    contenido = f.read()\n                    print(contenido)\n                "
        },
        "finally_clause": {
            "significado": "Parte de un bloque de código que siempre se ejecuta después de una instrucción `try`, independientemente de si se generó una excepción.",
            "uso": "Se utiliza para ejecutar código de limpieza o finalización, como el cierre de archivos o liberación de recursos.",
            "ejemplo": "\n                try:\n                    archivo = open('documento.txt', 'r')\n                    contenido = archivo.read()\n                finally:\n                    archivo.close()\n                    print('Archivo cerrado')\n                "
        },
        "file_read": {
            "significado": "Operación que permite leer los contenidos de un archivo en Python.",
            "uso": "Se utiliza para obtener los datos almacenados en un archivo para su procesamiento o visualización.",
            "ejemplo": "\n                with open('documento.txt', 'r') as archivo:\n                    contenido = archivo.read()\n                    print(contenido)\n                "
        },
        "form": {
            "significado": "Estructura o plantilla utilizada para organizar datos de manera específica.",
            "uso": "Se utiliza en interfaces de usuario o aplicaciones web para capturar y organizar datos del usuario.",
            "ejemplo": "\n                formulario = {'nombre': 'Juan', 'edad': 25}\n                print(formulario)\n                "
        },
        "function_call": {
            "significado": "Acción de invocar una función en el código, pasándole los parámetros necesarios para ejecutar su tarea.",
            "uso": "Se utiliza para ejecutar una función y obtener su resultado.",
            "ejemplo": "\n                def suma(a, b):\n                    return a + b\n                resultado = suma(3, 4)\n                print(resultado)  # Saída: 7\n                "
        },
        "force": {
            "significado": "Acción de imponer o forzar la ejecución de algo, generalmente en el contexto de programación o manipulación de objetos.",
            "uso": "Se utiliza para forzar un comportamiento específico en un programa, como evitar errores o realizar una acción sin importar las condiciones.",
            "ejemplo": "\n                # No existe un 'force' directo en Python, pero se puede usar 'assert' para forzar condiciones\n                assert 1 == 1, 'Condición falsa'\n                "
        },
        "function_pointer": {
            "significado": "Referencia a una función que puede ser pasada y ejecutada como un argumento.",
            "uso": "Se utiliza en lenguajes como C o C++ para referenciar funciones y pasarlas como parámetros.",
            "ejemplo": "\n                # En Python no existe un puntero de función directo, pero las funciones se pueden pasar como objetos\n                def saludar():\n                    print('Hola')\n                funcion = saludar\n                funcion()  # Saída: Hola\n                "
        },
        "float_precision": {
            "significado": "Número de dígitos que se usan para representar un número flotante con precisión.",
            "uso": "Se utiliza para especificar la cantidad de decimales que deben considerarse al realizar operaciones con números flotantes.",
            "ejemplo": "\n                numero = 3.14159265359\n                print(f'{numero:.2f}')  # Saída: 3.14\n                "
        },
        "format_error": {
            "significado": "Error que ocurre cuando hay un problema al formatear datos, como una cadena mal estructurada.",
            "uso": "Se utiliza para manejar errores relacionados con la conversión o formateo incorrecto de datos.",
            "ejemplo": "\n                try:\n                    int('abc')\n                except ValueError as e:\n                    print(f'Error de formato: {e}')\n                "
        },
        "file_write": {
            "significado": "Operación que permite escribir datos en un archivo en Python.",
            "uso": "Se utiliza para almacenar información en un archivo, sobrescribiéndolo o agregando nuevos datos.",
            "ejemplo": "\n                with open('documento.txt', 'w') as archivo:\n                    archivo.write('Hola, mundo!')\n                "
        },
        "fibonacci_search": {
            "significado": "Método de búsqueda que utiliza los números de Fibonacci para dividir el espacio de búsqueda de manera eficiente.",
            "uso": "Se utiliza como una alternativa al algoritmo de búsqueda binaria para encontrar un elemento en un array.",
            "ejemplo": "\n                # Implementación de Fibonacci Search no estándar, pero puede utilizarse como alternativa a la búsqueda binaria\n                def fibonacci_search(arr, x):\n                    fib_m_minus_2 = 0\n                    fib_m_minus_1 = 1\n                    fib_m = fib_m_minus_1 + fib_m_minus_2\n                    while(fib_m < len(arr)):\n                        fib_m_minus_2 = fib_m_minus_1\n                        fib_m_minus_1 = fib_m\n                        fib_m = fib_m_minus_1 + fib_m_minus_2\n                    "
        },
        "filter_map": {
            "significado": "Función que filtra los elementos de un iterable y luego aplica una función de mapeo a los elementos restantes.",
            "uso": "Se utiliza para realizar transformaciones y filtrados de manera eficiente en secuencias de datos.",
            "ejemplo": "\n                from itertools import filterfalse\n                data = [1, 2, 3, 4, 5]\n                result = map(lambda x: x * 2, filter(lambda x: x % 2 == 0, data))\n                print(list(result))  # Saída: [4, 8]\n                "
        }
    },
    "g": {
        "get": {
            "significado": "Método que obtiene el valor de una clave en un diccionario. Si la clave no existe, devuelve un valor por defecto.",
            "uso": "Se utiliza para obtener el valor asociado a una clave en un diccionario de manera segura.",
            "exemplo": "\n                diccionario = {'a': 1, 'b': 2}\n                print(diccionario.get('a'))  # Saída: 1\n                print(diccionario.get('c', 'No encontrado'))  # Saída: No encontrado\n                "
        },
        "global": {
            "significado": "Palabra clave que se utiliza para declarar que una variable es global, es decir, que pertenece al ámbito global.",
            "uso": "Se utiliza para modificar variables globales dentro de una función.",
            "exemplo": "\n                x = 10\n                def cambiar_global():\n                    global x\n                    x = 20\n                cambiar_global()\n                print(x)  # Saída: 20\n                "
        },
        "generator": {
            "significado": "Función que devuelve un iterador, permitiendo generar elementos de uno en uno durante la ejecución.",
            "uso": "Se utiliza para crear secuencias de elementos de manera perezosa (lazy evaluation), sin tener que almacenarlos todos en memoria.",
            "exemplo": "\n                def contar_hasta_tres():\n                    yield 1\n                    yield 2\n                    yield 3\n                for num in contar_hasta_tres():\n                    print(num)  # Saída: 1, 2, 3\n                "
        },
        "globals": {
            "significado": "Función que devuelve un diccionario de todas las variables globales.",
            "uso": "Se utiliza para acceder y modificar el diccionario de variables globales.",
            "exemplo": "\n                x = 10\n                print(globals())  # Saída: {'x': 10, ...}\n                "
        },
        "getattr": {
            "significado": "Función que obtiene el valor de un atributo de un objeto.",
            "uso": "Se utiliza para acceder a un atributo de un objeto, incluso si no se conoce su nombre de antemano.",
            "exemplo": "\n                class Persona:\n                    def __init__(self, nombre):\n                        self.nombre = nombre\n                p = Persona('Juan')\n                print(getattr(p, 'nombre'))  # Saída: Juan\n                "
        },
        "groupby": {
            "significado": "Función de `itertools` que agrupa los elementos de un iterable según una clave.",
            "uso": "Se utiliza para agrupar datos en función de un criterio, como en el caso de una lista de elementos.",
            "exemplo": "\n                from itertools import groupby\n                datos = [1, 2, 2, 3, 3, 3]\n                grupos = groupby(datos, key=lambda x: x)\n                for clave, grupo in grupos:\n                    print(clave, list(grupo))  # Saída: 1 [1], 2 [2, 2], 3 [3, 3, 3]\n                "
        },
        "gc": {
            "significado": "Módulo de recolección de basura que permite interactuar con el recolector de basura de Python.",
            "uso": "Se utiliza para gestionar la memoria y liberar objetos no referenciados.",
            "exemplo": "\n                import gc\n                gc.collect()  # Forzar la recolección de basura\n                "
        },
        "git": {
            "significado": "Sistema de control de versiones distribuido para gestionar el código fuente.",
            "uso": "Se utiliza para manejar versiones de código, facilitando el trabajo en equipo y el control de cambios.",
            "exemplo": "\n                # Usando Git en la terminal\n                git clone https://github.com/usuario/repositorio.git\n                "
        },
        "generator_expression": {
            "significado": "Expresión que permite generar un generador de manera compacta, similar a una lista por comprensión.",
            "uso": "Se utiliza para crear generadores de manera eficiente y sin necesidad de almacenar todos los elementos.",
            "exemplo": "\n                numeros = (x * 2 for x in range(5))\n                for num in numeros:\n                    print(num)  # Saída: 0, 2, 4, 6, 8\n                "
        },
        "gzip": {
            "significado": "Módulo que permite comprimir y descomprimir archivos en formato gzip.",
            "uso": "Se utiliza para trabajar con archivos comprimidos en el formato gzip, reduciendo su tamaño para almacenamiento o transmisión.",
            "exemplo": "\n                import gzip\n                with gzip.open('archivo.txt.gz', 'rb') as f:\n                    contenido = f.read()\n                    print(contenido)\n                "
        },
        "graph": {
            "significado": "Estructura de datos que representa relaciones entre objetos a través de nodos y aristas.",
            "uso": "Se utiliza para representar relaciones complejas entre objetos, como en redes sociales o rutas de transporte.",
            "exemplo": "\n                # Ejemplo básico de grafo\n                grafo = {'A': ['B', 'C'], 'B': ['A', 'D'], 'C': ['A'], 'D': ['B']}\n                print(grafo)\n                "
        },
        "grid": {
            "significado": "Estructura de datos o disposición de elementos en filas y columnas.",
            "uso": "Se utiliza para representar una cuadrícula, como en un tablero de ajedrez o una interfaz de usuario.",
            "exemplo": "\n                grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n                for fila in grid:\n                    print(fila)  # Saída: [1, 2, 3], [4, 5, 6], [7, 8, 9]\n                "
        },
        "getopt": {
            "significado": "Módulo que proporciona una forma de analizar los argumentos de la línea de comandos.",
            "uso": "Se utiliza para gestionar opciones y parámetros pasados a un programa desde la línea de comandos.",
            "exemplo": "\n                import getopt\n                opciones, argumentos = getopt.getopt(['-f', 'archivo.txt'], 'f:')\n                print(opciones)  # Saída: [('f', 'archivo.txt')]\n                "
        },
        "gcd": {
            "significado": "Función que calcula el máximo común divisor de dos números.",
            "uso": "Se utiliza para encontrar el mayor número que divide a dos números sin dejar residuo.",
            "exemplo": "\n                import math\n                print(math.gcd(24, 36))  # Saída: 12\n                "
        },
        "getpass": {
            "significado": "Función que lee una contraseña de manera oculta (sin mostrar caracteres al escribir).",
            "uso": "Se utiliza para leer contraseñas o entradas sensibles de forma segura en la terminal.",
            "exemplo": "\n                import getpass\n                password = getpass.getpass('Introduce tu contraseña: ')\n                print(password)  # La contraseña no se muestra mientras se escribe\n                "
        },
        "gradients": {
            "significado": "Cambio en el valor de una variable con respecto a otra, comúnmente utilizado en cálculo y machine learning.",
            "uso": "Se utiliza para calcular la dirección y la tasa de cambio de una función en relación con sus variables.",
            "exemplo": "\n                # Ejemplo de gradiente en optimización\n                def funcion(x):\n                    return x**2\n                gradiente = 2 * 3  # Gradiente de x^2 en x = 3\n                print(gradiente)  # Saída: 6\n                "
        },
        "graphlib": {
            "significado": "Módulo en Python que proporciona estructuras de datos para trabajar con grafos.",
            "uso": "Se utiliza para representar y manipular grafos de manera eficiente.",
            "exemplo": "\n                import graphlib\n                grafo = graphlib.TopologicalSorter({'A': ['B'], 'B': ['C'], 'C': []})\n                print(list(grafo.static_order()))  # Saída: ['A', 'B', 'C']\n                "
        },
        "get_event_loop": {
            "significado": "Función de la biblioteca `asyncio` que obtiene el bucle de eventos de la aplicación.",
            "uso": "Se utiliza para obtener el bucle de eventos principal en un programa asíncrono.",
            "exemplo": "\n                import asyncio\n                loop = asyncio.get_event_loop()\n                print(loop)  # Saída: <_UnixSelectorEventLoop running=True closed=False pid=12345>\n                "
        },
        "get_terminal_size": {
            "significado": "Función que obtiene el tamaño de la terminal en filas y columnas.",
            "uso": "Se utiliza para obtener la resolución de la terminal y ajustar el diseño de la salida.",
            "exemplo": "\n                import shutil\n                tamaño = shutil.get_terminal_size()\n                print(tamaño)  # Saída: os.terminal_size(columns=80, lines=24)\n                "
        },
        "getsizeof": {
            "significado": "Función del módulo `sys` que devuelve el tamaño de un objeto en bytes.",
            "uso": "Se utiliza para medir la memoria que ocupa un objeto en Python.",
            "exemplo": "\n                import sys\n                objeto = [1, 2, 3]\n                print(sys.getsizeof(objeto))  # Saída: 72 (dependiendo del sistema)\n                "
        },
        "google": {
            "significado": "Motor de búsqueda de internet, también utilizado como nombre de la empresa.",
            "uso": "Se utiliza para buscar información en la web a través de un navegador o API.",
            "exemplo": "\n                # Buscando algo en Google\n                # Se puede hacer a través de la interfaz web en www.google.com\n                "
        },
        "getdefaultencoding": {
            "significado": "Método que devuelve el nombre de la codificación predeterminada utilizada por el sistema.",
            "uso": "Se utiliza para conocer la codificación de texto predeterminada en Python.",
            "exemplo": "\n                import sys\n                print(sys.getdefaultencoding())  # Saída: 'utf-8' (dependiendo del sistema)\n                "
        },
        "geometry": {
            "significado": "Área de las matemáticas que se ocupa de las propiedades y relaciones de puntos, líneas, superficies y sólidos.",
            "uso": "Se utiliza en campos como la computación gráfica, ingeniería y arquitectura para describir formas y estructuras.",
            "exemplo": "\n                # Ejemplo de geometría en programación\n                import math\n                area_circulo = math.pi * (5**2)  # Área de un círculo con radio 5\n                print(area_circulo)  # Saída: 78.53981633974483\n                "
        },
        "greenlet": {
            "significado": "Módulo que proporciona primitivas para el control de flujo cooperativo de hilos (lightweight threads).",
            "uso": "Se utiliza para ejecutar funciones concurrentemente sin la sobrecarga de los hilos tradicionales.",
            "exemplo": "\n                from greenlet import greenlet\n                def funcion1():\n                    print('En la función 1')\n                    g2.switch()\n                def funcion2():\n                    print('En la función 2')\n                    g1.switch()\n                g1 = greenlet(funcion1)\n                g2 = greenlet(funcion2)\n                g1.switch()  # Saída: En la función 1, En la función 2\n                "
        },
        "gitignore": {
            "significado": "Archivo de configuración utilizado por Git para especificar qué archivos o directorios deben ser ignorados en el control de versiones.",
            "uso": "Se utiliza para evitar que ciertos archivos se incluyan en el repositorio Git, como archivos temporales o de configuración local.",
            "exemplo": "\n                # Ejemplo de .gitignore\n                *.log\n                __pycache__/\n                "
        },
        "grammar": {
            "significado": "Conjunto de reglas que describen la estructura de un lenguaje.",
            "uso": "Se utiliza para definir cómo se deben formar las oraciones o expresiones válidas en un lenguaje.",
            "exemplo": "\n                # Ejemplo de gramática en programación\n                def sumar(a, b):\n                    return a + b\n                # La sintaxis es la gramática de la función sumar\n                "
        },
        "gettext": {
            "significado": "Función que traduce un texto a un idioma específico, a menudo utilizada en aplicaciones multilingües.",
            "uso": "Se utiliza para obtener una cadena de texto traducida según el idioma actual del sistema.",
            "exemplo": "\n                import gettext\n                traduccion = gettext.translation('mi_app', localedir='locales', languages=['es'])\n                print(traduccion.gettext('Hello'))  # Saída: Hola\n                "
        },
        "generate_tokens": {
            "significado": "Función que genera una secuencia de tokens a partir de un objeto de texto, utilizado para analizar y procesar código fuente.",
            "uso": "Se utiliza en la creación de analizadores léxicos para dividir un texto en unidades significativas.",
            "exemplo": "\n                import token\n                import tokenize\n                codigo = 'print(\"Hola Mundo\")'\n                tokens = tokenize.generate_tokens(iter(codigo).__next__)\n                for t in tokens:\n                    print(t)\n                "
        },
        "gevent": {
            "significado": "Biblioteca de Python para trabajar con concurrencia basada en hilos ligeros, utilizando corutinas.",
            "uso": "Se utiliza para manejar tareas concurrentes de manera eficiente sin la necesidad de múltiples hilos.",
            "exemplo": "\n                import gevent\n                def tarea():\n                    print('Tarea completada')\n                gevent.spawn(tarea).join()\n                "
        },
        "gui": {
            "significado": "Interfaz gráfica de usuario, un sistema de interacción visual con los programas informáticos.",
            "uso": "Se utiliza para crear aplicaciones con interfaces visuales, facilitando la interacción del usuario.",
            "exemplo": "\n                import tkinter as tk\n                ventana = tk.Tk()\n                ventana.title('Mi GUI')\n                ventana.mainloop()\n                "
        },
        "generator_function": {
            "significado": "Función que utiliza `yield` para devolver un generador.",
            "uso": "Se utiliza para crear funciones que devuelven un generador y permiten la iteración perezosa.",
            "exemplo": "\n                def contar():\n                    yield 1\n                    yield 2\n                    yield 3\n                for numero in contar():\n                    print(numero)  # Saída: 1, 2, 3\n                "
        },
        "get_data": {
            "significado": "Método o función que obtiene datos de una fuente externa o interna.",
            "uso": "Se utiliza para recuperar datos desde bases de datos, APIs u otras fuentes.",
            "exemplo": "\n                def obtener_datos():\n                    return {'nombre': 'Juan', 'edad': 25}\n                print(obtener_datos())  # Saída: {'nombre': 'Juan', 'edad': 25}\n                "
        },
        "git_branch": {
            "significado": "Comando de Git que permite trabajar con ramas dentro de un repositorio.",
            "uso": "Se utiliza para crear, listar y cambiar entre diferentes ramas de un proyecto en Git.",
            "exemplo": "\n                git branch  # Muestra las ramas existentes\n                git checkout -b nueva_rama  # Crea y cambia a la nueva rama\n                "
        },
        "governance": {
            "significado": "El proceso de toma de decisiones y gestión en una organización o sistema.",
            "uso": "Se utiliza para referirse a cómo se administra y regula un sistema o entidad.",
            "exemplo": "\n                La gobernanza corporativa se refiere a las prácticas y estructuras organizacionales para la toma de decisiones.\n                "
        },
        "gtts": {
            "significado": "Biblioteca de Python para convertir texto en voz usando el servicio Google Text-to-Speech.",
            "uso": "Se utiliza para generar archivos de audio a partir de texto en varios idiomas.",
            "exemplo": "\n                from gtts import gTTS\n                tts = gTTS('Hola, ¿cómo estás?', lang='es')\n                tts.save('hola.mp3')\n                "
        },
        "get_identity": {
            "significado": "Método o función que obtiene la identidad de un objeto o usuario.",
            "uso": "Se utiliza para obtener información sobre la identidad de un objeto o entidad, como un identificador único.",
            "exemplo": "\n                def get_identity(usuario):\n                    return usuario['id']\n                usuario = {'id': 123, 'nombre': 'Juan'}\n                print(get_identity(usuario))  # Saída: 123\n                "
        },
        "get_status": {
            "significado": "Método o función que obtiene el estado de una operación, proceso o entidad.",
            "uso": "Se utiliza para verificar o recuperar el estado actual de un sistema o proceso.",
            "exemplo": "\n                def get_status(operacion):\n                    return operacion['estado']\n                operacion = {'estado': 'completada'}\n                print(get_status(operacion))  # Saída: completada\n                "
        },
        "generator_instance": {
            "significado": "Instancia de un generador, que es un objeto que permite iterar sobre una secuencia de elementos.",
            "uso": "Se utiliza para manejar iteraciones de manera eficiente utilizando la palabra clave `yield`.",
            "exemplo": "\n                def contador():\n                    yield 1\n                    yield 2\n                    yield 3\n                generador = contador()\n                for numero in generador:\n                    print(numero)  # Saída: 1, 2, 3\n                "
        },
        "guess_encoding": {
            "significado": "Método que adivina la codificación de un archivo de texto, basado en su contenido.",
            "uso": "Se utiliza para detectar la codificación de archivos de texto que no tienen especificada una.",
            "exemplo": "\n                import chardet\n                with open('archivo.txt', 'rb') as f:\n                    resultado = chardet.detect(f.read())\n                print(resultado['encoding'])  # Saída: utf-8\n                "
        },
        "git_commit": {
            "significado": "Comando de Git utilizado para registrar los cambios en el repositorio.",
            "uso": "Se utiliza para guardar un conjunto de cambios realizados en los archivos de un proyecto en el repositorio.",
            "exemplo": "\n                git commit -m \"Mensaje del commit\"\n                "
        },
        "gradient_descent": {
            "significado": "Método de optimización utilizado para minimizar funciones iterativamente, ajustando los parámetros en la dirección del gradiente negativo.",
            "uso": "Se utiliza principalmente en machine learning para encontrar los valores óptimos de los parámetros del modelo.",
            "exemplo": "\n                # Ejemplo simplificado de gradiente descendente\n                def gradiente_descendente(funcion, derivada, x_inicial, tasa_aprendizaje, iteraciones):\n                    x = x_inicial\n                    for _ in range(iteraciones):\n                        x -= tasa_aprendizaje * derivada(x)\n                    return x\n                "
        },
        "get_referrers": {
            "significado": "Función que obtiene una lista de objetos que hacen referencia a un objeto dado.",
            "uso": "Se utiliza para rastrear las referencias hacia un objeto, útil para análisis de memoria.",
            "exemplo": "\n                import sys\n                referencia = sys.get_referrers(objeto)\n                print(referencia)\n                "
        },
        "get_window_extent": {
            "significado": "Método que obtiene las dimensiones de una ventana gráfica o área en la pantalla.",
            "uso": "Se utiliza para determinar el tamaño y las coordenadas de la ventana de una aplicación o gráfico.",
            "exemplo": "\n                import matplotlib.pyplot as plt\n                fig, ax = plt.subplots()\n                extent = ax.get_window_extent()\n                print(extent)\n                "
        },
        "group": {
            "significado": "Método que agrupa elementos en una colección o estructura basada en algún criterio.",
            "uso": "Se utiliza para organizar datos en grupos o categorías.",
            "exemplo": "\n                from itertools import groupby\n                lista = [1, 1, 2, 2, 3]\n                grupo = groupby(lista)\n                for clave, valor in grupo:\n                    print(clave, list(valor))  # Saída: 1 [1, 1], 2 [2, 2], 3 [3]\n                "
        },
        "get_history": {
            "significado": "Método que obtiene el historial de operaciones o acciones previas.",
            "uso": "Se utiliza para recuperar las acciones anteriores realizadas en un sistema o aplicación.",
            "exemplo": "\n                # Ejemplo de recuperación del historial en un sistema\n                historial = get_history()\n                print(historial)\n                "
        },
        "gradient": {
            "significado": "El vector que indica la dirección y la tasa de cambio de una función en un punto dado.",
            "uso": "Se utiliza principalmente en el cálculo diferencial y en el entrenamiento de modelos en machine learning.",
            "exemplo": "\n                # Ejemplo de gradiente de una función\n                import numpy as np\n                def funcion(x):\n                    return x**2\n                gradiente = 2 * 3  # Gradiente de x^2 en x = 3\n                print(gradiente)  # Saída: 6\n                "
        },
        "getfqdn": {
            "significado": "Función que obtiene el nombre de dominio completo (FQDN) de la máquina local.",
            "uso": "Se utiliza para obtener el nombre completo de dominio de la computadora en una red.",
            "exemplo": "\n                import socket\n                fqdn = socket.getfqdn()\n                print(fqdn)  # Saída: ejemplo.local\n                "
        },
        "get_url": {
            "significado": "Función que obtiene una URL específica, generalmente para acceder a un recurso en línea.",
            "uso": "Se utiliza para recuperar una URL desde una fuente externa o generar una URL para un recurso.",
            "exemplo": "\n                import requests\n                url = \"http://example.com\"\n                respuesta = requests.get(url)\n                print(respuesta.url)\n                "
        },
        "get_line": {
            "significado": "Método que obtiene una línea específica de un archivo o conjunto de datos.",
            "uso": "Se utiliza para acceder a una línea específica dentro de un archivo o texto.",
            "exemplo": "\n                with open('archivo.txt', 'r') as f:\n                    linea = f.readline()\n                    print(linea)\n                "
        },
        "get_clock_info": {
            "significado": "Método que obtiene información sobre el reloj del sistema, como la frecuencia de actualización.",
            "uso": "Se utiliza para obtener detalles sobre el rendimiento y las características del reloj del sistema.",
            "exemplo": "\n                import time\n                info = time.get_clock_info('time')\n                print(info)\n                "
        },
        "getmtime": {
            "significado": "Función que obtiene la hora de la última modificación de un archivo.",
            "uso": "Se utiliza para obtener el tiempo de la última modificación de un archivo o directorio.",
            "exemplo": "\n                import os\n                ultima_modificacion = os.path.getmtime('archivo.txt')\n                print(ultima_modificacion)\n                "
        },
        "gettext_install": {
            "significado": "Comando o función que instala el paquete `gettext` para la internacionalización de aplicaciones.",
            "uso": "Se utiliza para instalar el paquete necesario para traducir cadenas de texto en aplicaciones de Python.",
            "exemplo": "\n                # Ejemplo en la terminal\n                pip install gettext\n                "
        },
        "geometry_manager": {
            "significado": "Método utilizado para gestionar el tamaño y la ubicación de los widgets en interfaces gráficas.",
            "uso": "Se utiliza en bibliotecas de interfaces gráficas como Tkinter para controlar la disposición de los elementos.",
            "exemplo": "\n                import tkinter as tk\n                root = tk.Tk()\n                label = tk.Label(root, text=\"Hola Mundo\")\n                label.pack()  # Usa el geometry manager 'pack'\n                root.mainloop()\n                "
        },
        "gcd_algorithm": {
            "significado": "Algoritmo para calcular el máximo común divisor (GCD) de dos números.",
            "uso": "Se utiliza para encontrar el mayor número que divide exactamente a dos números.",
            "exemplo": "\n                import math\n                gcd = math.gcd(24, 36)\n                print(gcd)  # Saída: 12\n                "
        },
        "googletrans": {
            "significado": "Biblioteca de Python que utiliza la API de Google Translate para traducir texto entre diferentes idiomas.",
            "uso": "Se utiliza para traducir texto automáticamente usando los servicios de Google Translate.",
            "exemplo": "\n                from googletrans import Translator\n                translator = Translator()\n                traduccion = translator.translate('Hola, ¿cómo estás?', src='es', dest='en')\n                print(traduccion.text)  # Saída: Hello, how are you?\n                "
        },
        "get_dpi": {
            "significado": "Función que obtiene la densidad de píxeles por pulgada (DPI) de la pantalla.",
            "uso": "Se utiliza para obtener la resolución de la pantalla en términos de píxeles por pulgada.",
            "exemplo": "\n                import tkinter as tk\n                root = tk.Tk()\n                dpi = root.winfo_fpixels('1i')  # Píxeles por pulgada\n                print(dpi)\n                "
        },
        "geolocation": {
            "significado": "Proceso de determinar la ubicación geográfica de un dispositivo.",
            "uso": "Se utiliza para obtener la latitud, longitud y otros detalles sobre la ubicación de un dispositivo.",
            "exemplo": "\n                # Ejemplo usando geopy\n                from geopy.geocoders import Nominatim\n                geolocator = Nominatim(user_agent=\"mi_app\")\n                ubicacion = geolocator.geocode(\"1600 Pennsylvania Ave NW, Washington, DC 20500\")\n                print(ubicacion.address)\n                "
        },
        "git_merge": {
            "significado": "Comando de Git que combina cambios de diferentes ramas en una sola.",
            "uso": "Se utiliza para fusionar las ramas de un repositorio en Git.",
            "exemplo": "\n                git checkout master\n                git merge rama-feature\n                "
        },
        "get_tick_params": {
            "significado": "Función que obtiene los parámetros de los 'ticks' en un gráfico.",
            "uso": "Se utiliza en bibliotecas gráficas como Matplotlib para ajustar los valores de los ejes en los gráficos.",
            "exemplo": "\n                import matplotlib.pyplot as plt\n                fig, ax = plt.subplots()\n                ticks = ax.get_xticks()\n                print(ticks)\n                "
        },
        "getrandbits": {
            "significado": "Método que devuelve un número aleatorio con una cantidad específica de bits.",
            "uso": "Se utiliza para generar números aleatorios binarios con un número determinado de bits.",
            "exemplo": "\n                import random\n                numero = random.getrandbits(8)  # 8 bits\n                print(numero)  # Saída: número aleatorio de 8 bits\n                "
        },
        "gui_toolkit": {
            "significado": "Conjunto de herramientas o bibliotecas utilizadas para desarrollar interfaces gráficas de usuario (GUI).",
            "uso": "Se utiliza para construir aplicaciones con interfaces visuales interactivas.",
            "exemplo": "\n                # Ejemplo con Tkinter\n                import tkinter as tk\n                root = tk.Tk()\n                label = tk.Label(root, text=\"Hola Mundo\")\n                label.pack()\n                root.mainloop()\n                "
        },
        "getpid": {
            "significado": "Función que obtiene el ID del proceso actual.",
            "uso": "Se utiliza para obtener el identificador único del proceso en ejecución.",
            "exemplo": "\n                import os\n                pid = os.getpid()\n                print(pid)  # Saída: ID del proceso actual\n                "
        },
        "get_event": {
            "significado": "Método que obtiene un evento específico en el contexto de un sistema o aplicación.",
            "uso": "Se utiliza para recuperar un evento de un sistema de gestión de eventos.",
            "exemplo": "\n                # Ejemplo en un sistema de eventos\n                evento = get_event(\"click\")\n                print(evento)\n                "
        },
        "gmm": {
            "significado": "Modelo de Mezcla Gaussiana (GMM), un modelo probabilístico para la distribución de datos.",
            "uso": "Se utiliza en machine learning para modelar datos como una mezcla de distribuciones gaussianas.",
            "exemplo": "\n                from sklearn.mixture import GaussianMixture\n                gmm = GaussianMixture(n_components=2)\n                gmm.fit(datos)\n                "
        },
        "gather": {
            "significado": "Función utilizada para recopilar o juntar elementos o resultados en una estructura.",
            "uso": "Se utiliza para recoger resultados de operaciones paralelas o de múltiples fuentes.",
            "exemplo": "\n                import asyncio\n                async def tarea():\n                    return 1\n                async def main():\n                    resultados = await asyncio.gather(tarea(), tarea())\n                    print(resultados)\n                asyncio.run(main())\n                "
        },
        "get_statistics": {
            "significado": "Método que obtiene las estadísticas de un conjunto de datos.",
            "uso": "Se utiliza para calcular y recuperar métricas estadísticas como media, mediana, desviación estándar, etc.",
            "exemplo": "\n                import statistics\n                datos = [1, 2, 3, 4, 5]\n                media = statistics.mean(datos)\n                print(media)  # Saída: 3\n                "
        },
        "get_user": {
            "significado": "Método que obtiene la información del usuario actual.",
            "uso": "Se utiliza para recuperar los detalles del usuario en un sistema.",
            "exemplo": "\n                import os\n                usuario = os.getlogin()\n                print(usuario)  # Saída: nombre de usuario\n                "
        },
        "get_unique": {
            "significado": "Función que obtiene los elementos únicos de un conjunto de datos.",
            "uso": "Se utiliza para recuperar los valores no repetidos de una lista o conjunto.",
            "exemplo": "\n                import numpy as np\n                datos = [1, 2, 2, 3, 4, 4]\n                unicos = np.unique(datos)\n                print(unicos)  # Saída: [1 2 3 4]\n                "
        },
        "git_rebase": {
            "significado": "Comando de Git que permite aplicar cambios de una rama en otra, reescribiendo el historial.",
            "uso": "Se utiliza para integrar los cambios de una rama en otra de una manera más limpia, reorganizando los commits.",
            "exemplo": "\n                git checkout feature-branch\n                git rebase main\n                "
        },
        "get_score": {
            "significado": "Método para obtener una puntuación o calificación basada en algún criterio o cálculo.",
            "uso": "Se utiliza en diversas aplicaciones para obtener la puntuación de un sistema, juego, examen, etc.",
            "exemplo": "\n                score = game.get_score()\n                print(score)  # Saída: puntuación actual\n                "
        },
        "graph_data": {
            "significado": "Proceso de representar datos en forma de gráficos.",
            "uso": "Se utiliza para visualizar información y patrones mediante gráficos como barras, líneas, etc.",
            "exemplo": "\n                import matplotlib.pyplot as plt\n                datos = [1, 2, 3, 4, 5]\n                plt.plot(datos)\n                plt.show()\n                "
        },
        "get_installed_distributions": {
            "significado": "Función que obtiene las distribuciones de paquetes instaladas en el entorno de Python.",
            "uso": "Se utiliza para obtener una lista de los paquetes instalados en un entorno Python.",
            "exemplo": "\n                from pkg_resources import get_distribution\n                distribuciones = get_installed_distributions()\n                for distrib in distribuciones:\n                    print(distrib)\n                "
        },
        "geocode": {
            "significado": "Proceso de convertir una dirección en coordenadas geográficas (latitud y longitud).",
            "uso": "Se utiliza para obtener la ubicación geográfica de una dirección textual.",
            "exemplo": "\n                from geopy.geocoders import Nominatim\n                geolocator = Nominatim(user_agent=\"mi_app\")\n                ubicacion = geolocator.geocode(\"1600 Pennsylvania Ave NW, Washington, DC 20500\")\n                print(ubicacion.latitude, ubicacion.longitude)\n                "
        },
        "get_type_hints": {
            "significado": "Función que obtiene las sugerencias de tipos de los parámetros y valores de retorno de una función.",
            "uso": "Se utiliza para obtener las anotaciones de tipo de una función.",
            "exemplo": "\n                from typing import get_type_hints\n                def ejemplo(x: int, y: str) -> bool:\n                    return True\n                print(get_type_hints(ejemplo))\n                "
        },
        "genericpath": {
            "significado": "Módulo que proporciona funciones para trabajar con rutas de archivos y directorios de forma genérica.",
            "uso": "Se utiliza para manejar y manipular rutas de archivos y directorios.",
            "exemplo": "\n                import genericpath\n                archivo = \"/ruta/a/archivo.txt\"\n                print(genericpath.exists(archivo))  # Saída: True o False\n                "
        },
        "get_resource_path": {
            "significado": "Método que obtiene la ruta de un recurso dentro de un paquete o aplicación.",
            "uso": "Se utiliza para localizar recursos dentro de un entorno empaquetado.",
            "exemplo": "\n                import pkg_resources\n                ruta = pkg_resources.resource_filename('mi_paquete', 'recurso.txt')\n                print(ruta)\n                "
        },
        "git_pull": {
            "significado": "Comando de Git que actualiza el repositorio local con los cambios más recientes del repositorio remoto.",
            "uso": "Se utiliza para obtener los cambios más recientes desde el repositorio remoto y fusionarlos con la rama local.",
            "exemplo": "\n                git pull origin master\n                "
        },
        "get_cached_properties": {
            "significado": "Método para obtener propiedades que han sido almacenadas en caché.",
            "uso": "Se utiliza para acceder a propiedades previamente calculadas y almacenadas en memoria para mejorar la eficiencia.",
            "exemplo": "\n                class MiClase:\n                    @property\n                    def propiedad(self):\n                        if not hasattr(self, '_cached_propiedad'):\n                            self._cached_propiedad = 42  # Ejemplo de cálculo\n                        return self._cached_propiedad\n                obj = MiClase()\n                print(obj.propiedad)  # Saída: 42\n                "
        },
        "geopandas": {
            "significado": "Biblioteca de Python para la manipulación y análisis de datos geoespaciales.",
            "uso": "Se utiliza para trabajar con datos espaciales, como mapas y coordenadas geográficas.",
            "exemplo": "\n                import geopandas as gpd\n                gdf = gpd.read_file('mapa.shp')\n                gdf.plot()\n                "
        },
        "get_open_files": {
            "significado": "Función que obtiene una lista de archivos abiertos en un sistema.",
            "uso": "Se utiliza para monitorear los archivos abiertos en un proceso o sistema.",
            "exemplo": "\n                import psutil\n                procesos = psutil.process_iter(['pid', 'name'])\n                for proceso in procesos:\n                    archivos = proceso.open_files()\n                    for archivo in archivos:\n                        print(archivo.path)\n                "
        },
        "get_active_connections": {
            "significado": "Método que obtiene las conexiones activas en un sistema o red.",
            "uso": "Se utiliza para obtener las conexiones activas en una aplicación o sistema operativo.",
            "exemplo": "\n                import psutil\n                conexiones = psutil.net_connections()\n                for conexion in conexiones:\n                    print(conexion)\n                "
        },
        "guess_language": {
            "significado": "Función que adivina el idioma de un texto dado.",
            "uso": "Se utiliza para determinar el idioma de una cadena de texto.",
            "exemplo": "\n                from langdetect import detect\n                idioma = detect(\"Hola, ¿cómo estás?\")\n                print(idioma)  # Saída: es\n                "
        },
        "get_doc": {
            "significado": "Método que obtiene la documentación asociada a un objeto o función.",
            "uso": "Se utiliza para obtener la cadena de documentación (docstring) de un objeto o función.",
            "exemplo": "\n                def ejemplo():\n                    \"\"\"Esta es la documentación de la función\"\"\"\n                    pass\n                print(ejemplo.__doc__)\n                "
        }
    },
    "h": {},
    "i": {
        "if": {
            "significado": "Condição que é avaliada como verdadeira ou falsa.",
            "uso": "Usado para tomar decisões no fluxo de um programa.",
            "ejemplo": "if x > 10: print('Maior que 10')"
        },
        "input": {
            "significado": "Lê dados inseridos pelo usuário no console",
            "uso": "Serve para interagir com o usuário e obter informações.",
            "ejemplo": "input('insira um número')"
        }
    },
    "j": {},
    "k": {
        "kwargs": {
            "significado": "Es un parámetro que permite recibir un número variable de argumentos con nombre en una función.",
            "uso": "Se utiliza para manejar argumentos nombrados dinámicos en una función.",
            "ejemplo": "\n                def mostrar_informacion(**kwargs):\n                    for clave, valor in kwargs.items():\n                        print(f'{clave}: {valor}')\n\n                mostrar_informacion(nombre='Juan', edad=30)\n                # Salida:\n                # nombre: Juan\n                # edad: 30\n                "
        }
    },
    "l": {
        "len()": {
            "significado": "Retorna o comprimento de um objeto (como uma lista ou string).",
            "uso": "Usado para contar elementos em uma sequência.",
            "ejemplo": "texto = \"Olá, Mundo\"\n            comprimento = len(texto)\n        print(f\"O comprimento da string é: {comprimento}\")"
        }
    },
    "m": {},
    "n": {},
    "o": {},
    "p": {},
    "q": {},
    "r": {},
    "s": {},
    "t": {},
    "u": {},
    "v": {},
    "w": {},
    "x": {},
    "y": {},
    "z": {}
}